/* 
 * Otreeba Open Cannabis API
 *
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Brand
    /// </summary>
    [DataContract]
    public partial class Brand :  IEquatable<Brand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Brand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        /// <param name="Name">Name of the brand. (required).</param>
        /// <param name="Ocpc">Open Cannabis Product Code for the brand..</param>
        /// <param name="Link">URL for brand on Otreeba..</param>
        /// <param name="Qr">URL for QR that leads to page on Cannabis Reports..</param>
        /// <param name="Url">URL for brand on Cannabis Reports..</param>
        /// <param name="Image">URL for logo for brand..</param>
        /// <param name="Flowers">OCPCs of the flowers from this brand..</param>
        /// <param name="Extracts">OCPCs of the extracts from this brand..</param>
        /// <param name="Edibles">OCPCs of the edibles from this brand..</param>
        /// <param name="Products">OCPCs of the products from this brand..</param>
        /// <param name="CreatedAt">Date and time record was created, UTC..</param>
        /// <param name="UpdatedAt">Date and time record was updated, UTC..</param>
        public Brand(string Name = default(string), string Ocpc = default(string), string Link = default(string), string Qr = default(string), string Url = default(string), string Image = default(string), List<string> Flowers = default(List<string>), List<string> Extracts = default(List<string>), List<string> Edibles = default(List<string>), List<string> Products = default(List<string>), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Brand and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Ocpc = Ocpc;
            this.Link = Link;
            this.Qr = Qr;
            this.Url = Url;
            this.Image = Image;
            this.Flowers = Flowers;
            this.Extracts = Extracts;
            this.Edibles = Edibles;
            this.Products = Products;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Name of the brand.
        /// </summary>
        /// <value>Name of the brand.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Open Cannabis Product Code for the brand.
        /// </summary>
        /// <value>Open Cannabis Product Code for the brand.</value>
        [DataMember(Name="ocpc", EmitDefaultValue=false)]
        public string Ocpc { get; set; }

        /// <summary>
        /// URL for brand on Otreeba.
        /// </summary>
        /// <value>URL for brand on Otreeba.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// URL for QR that leads to page on Cannabis Reports.
        /// </summary>
        /// <value>URL for QR that leads to page on Cannabis Reports.</value>
        [DataMember(Name="qr", EmitDefaultValue=false)]
        public string Qr { get; set; }

        /// <summary>
        /// URL for brand on Cannabis Reports.
        /// </summary>
        /// <value>URL for brand on Cannabis Reports.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// URL for logo for brand.
        /// </summary>
        /// <value>URL for logo for brand.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// OCPCs of the flowers from this brand.
        /// </summary>
        /// <value>OCPCs of the flowers from this brand.</value>
        [DataMember(Name="flowers", EmitDefaultValue=false)]
        public List<string> Flowers { get; set; }

        /// <summary>
        /// OCPCs of the extracts from this brand.
        /// </summary>
        /// <value>OCPCs of the extracts from this brand.</value>
        [DataMember(Name="extracts", EmitDefaultValue=false)]
        public List<string> Extracts { get; set; }

        /// <summary>
        /// OCPCs of the edibles from this brand.
        /// </summary>
        /// <value>OCPCs of the edibles from this brand.</value>
        [DataMember(Name="edibles", EmitDefaultValue=false)]
        public List<string> Edibles { get; set; }

        /// <summary>
        /// OCPCs of the products from this brand.
        /// </summary>
        /// <value>OCPCs of the products from this brand.</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<string> Products { get; set; }

        /// <summary>
        /// Date and time record was created, UTC.
        /// </summary>
        /// <value>Date and time record was created, UTC.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Date and time record was updated, UTC.
        /// </summary>
        /// <value>Date and time record was updated, UTC.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Brand {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ocpc: ").Append(Ocpc).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Qr: ").Append(Qr).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Flowers: ").Append(Flowers).Append("\n");
            sb.Append("  Extracts: ").Append(Extracts).Append("\n");
            sb.Append("  Edibles: ").Append(Edibles).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Brand);
        }

        /// <summary>
        /// Returns true if Brand instances are equal
        /// </summary>
        /// <param name="other">Instance of Brand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Brand other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Ocpc == other.Ocpc ||
                    this.Ocpc != null &&
                    this.Ocpc.Equals(other.Ocpc)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                ) && 
                (
                    this.Qr == other.Qr ||
                    this.Qr != null &&
                    this.Qr.Equals(other.Qr)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) && 
                (
                    this.Flowers == other.Flowers ||
                    this.Flowers != null &&
                    this.Flowers.SequenceEqual(other.Flowers)
                ) && 
                (
                    this.Extracts == other.Extracts ||
                    this.Extracts != null &&
                    this.Extracts.SequenceEqual(other.Extracts)
                ) && 
                (
                    this.Edibles == other.Edibles ||
                    this.Edibles != null &&
                    this.Edibles.SequenceEqual(other.Edibles)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Ocpc != null)
                    hash = hash * 59 + this.Ocpc.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                if (this.Qr != null)
                    hash = hash * 59 + this.Qr.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.Flowers != null)
                    hash = hash * 59 + this.Flowers.GetHashCode();
                if (this.Extracts != null)
                    hash = hash * 59 + this.Extracts.GetHashCode();
                if (this.Edibles != null)
                    hash = hash * 59 + this.Edibles.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Otreeba Open Cannabis API
 *
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Study
    /// </summary>
    [DataContract]
    public partial class Study :  IEquatable<Study>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Study" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Study() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Study" /> class.
        /// </summary>
        /// <param name="Name">Name of the study. (required).</param>
        /// <param name="Year">Year of the study..</param>
        /// <param name="Doi">Digital Object Identifier for the study..</param>
        /// <param name="PubMedId">PubMed ID for the study..</param>
        /// <param name="Slug">Slug based on the study name..</param>
        /// <param name="KeyFindings">Key findings for the study..</param>
        /// <param name="Conditions">Conditions.</param>
        /// <param name="CreatedAt">Date and time record was created, UTC..</param>
        /// <param name="UpdatedAt">Date and time record was updated, UTC..</param>
        public Study(string Name = default(string), int? Year = default(int?), string Doi = default(string), string PubMedId = default(string), string Slug = default(string), string KeyFindings = default(string), List<Condition> Conditions = default(List<Condition>), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Study and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Year = Year;
            this.Doi = Doi;
            this.PubMedId = PubMedId;
            this.Slug = Slug;
            this.KeyFindings = KeyFindings;
            this.Conditions = Conditions;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Name of the study.
        /// </summary>
        /// <value>Name of the study.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Year of the study.
        /// </summary>
        /// <value>Year of the study.</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }
        /// <summary>
        /// Digital Object Identifier for the study.
        /// </summary>
        /// <value>Digital Object Identifier for the study.</value>
        [DataMember(Name="doi", EmitDefaultValue=false)]
        public string Doi { get; set; }
        /// <summary>
        /// PubMed ID for the study.
        /// </summary>
        /// <value>PubMed ID for the study.</value>
        [DataMember(Name="pubMedId", EmitDefaultValue=false)]
        public string PubMedId { get; set; }
        /// <summary>
        /// Slug based on the study name.
        /// </summary>
        /// <value>Slug based on the study name.</value>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; set; }
        /// <summary>
        /// Key findings for the study.
        /// </summary>
        /// <value>Key findings for the study.</value>
        [DataMember(Name="keyFindings", EmitDefaultValue=false)]
        public string KeyFindings { get; set; }
        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<Condition> Conditions { get; set; }
        /// <summary>
        /// Date and time record was created, UTC.
        /// </summary>
        /// <value>Date and time record was created, UTC.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Date and time record was updated, UTC.
        /// </summary>
        /// <value>Date and time record was updated, UTC.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Study {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Doi: ").Append(Doi).Append("\n");
            sb.Append("  PubMedId: ").Append(PubMedId).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  KeyFindings: ").Append(KeyFindings).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Study);
        }

        /// <summary>
        /// Returns true if Study instances are equal
        /// </summary>
        /// <param name="other">Instance of Study to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Study other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Year == other.Year ||
                    this.Year != null &&
                    this.Year.Equals(other.Year)
                ) && 
                (
                    this.Doi == other.Doi ||
                    this.Doi != null &&
                    this.Doi.Equals(other.Doi)
                ) && 
                (
                    this.PubMedId == other.PubMedId ||
                    this.PubMedId != null &&
                    this.PubMedId.Equals(other.PubMedId)
                ) && 
                (
                    this.Slug == other.Slug ||
                    this.Slug != null &&
                    this.Slug.Equals(other.Slug)
                ) && 
                (
                    this.KeyFindings == other.KeyFindings ||
                    this.KeyFindings != null &&
                    this.KeyFindings.Equals(other.KeyFindings)
                ) && 
                (
                    this.Conditions == other.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Year != null)
                    hash = hash * 59 + this.Year.GetHashCode();
                if (this.Doi != null)
                    hash = hash * 59 + this.Doi.GetHashCode();
                if (this.PubMedId != null)
                    hash = hash * 59 + this.PubMedId.GetHashCode();
                if (this.Slug != null)
                    hash = hash * 59 + this.Slug.GetHashCode();
                if (this.KeyFindings != null)
                    hash = hash * 59 + this.KeyFindings.GetHashCode();
                if (this.Conditions != null)
                    hash = hash * 59 + this.Conditions.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

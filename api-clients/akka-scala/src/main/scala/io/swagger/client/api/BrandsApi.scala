/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Brand
import io.swagger.client.model.InlineResponse2005
import io.swagger.client.model.InlineResponse2006
import io.swagger.client.model.InlineResponse2007
import io.swagger.client.model.InlineResponse2008
import io.swagger.client.model.InlineResponse2009
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object BrandsApi {

  /**
   * Returns a single brand.
   * 
   * Expected answers:
   *   code 200 : Brand (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param ocpc OCPC of the brand to return.
   */
  def getBrandByOcpc(ocpc: String)(implicit apiKey: ApiKeyValue): ApiRequest[Brand] =
    ApiRequest[Brand](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands/{ocpc}", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withPathParam("ocpc", ocpc)
      .withSuccessResponse[Brand](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * Returns a paginated list of edibles.
   * 
   * Expected answers:
   *   code 200 : InlineResponse2008 (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param ocpc OCPC of the brand to list edibles for.
   * @param page Page to be returned.
   * @param count The number of items to return. Default 10. Max 50.
   * @param sort How to sort the items.
   */
  def getBrandEdibles(ocpc: String, page: Option[Int] = None, count: Option[Int], sort: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse2008] =
    ApiRequest[InlineResponse2008](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands/{ocpc}/edibles", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("count", count)
      .withQueryParam("sort", sort)
      .withPathParam("ocpc", ocpc)
      .withSuccessResponse[InlineResponse2008](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * Returns a paginated list of extracts.
   * 
   * Expected answers:
   *   code 200 : InlineResponse2007 (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param ocpc OCPC of the brand to list extracts for.
   * @param page Page to be returned.
   * @param count The number of items to return. Default 10. Max 50.
   * @param sort How to sort the items.
   */
  def getBrandExtracts(ocpc: String, page: Option[Int] = None, count: Option[Int], sort: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse2007] =
    ApiRequest[InlineResponse2007](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands/{ocpc}/extracts", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("count", count)
      .withQueryParam("sort", sort)
      .withPathParam("ocpc", ocpc)
      .withSuccessResponse[InlineResponse2007](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * Returns a paginated list of flowers.
   * 
   * Expected answers:
   *   code 200 : InlineResponse2006 (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param ocpc OCPC of the brand to list flowers for.
   * @param page Page to be returned.
   * @param count The number of items to return. Default 10. Max 50.
   * @param sort How to sort the items.
   */
  def getBrandFlowers(ocpc: String, page: Option[Int] = None, count: Option[Int], sort: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse2006] =
    ApiRequest[InlineResponse2006](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands/{ocpc}/flowers", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("count", count)
      .withQueryParam("sort", sort)
      .withPathParam("ocpc", ocpc)
      .withSuccessResponse[InlineResponse2006](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * Returns a paginated list of products.
   * 
   * Expected answers:
   *   code 200 : InlineResponse2009 (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param ocpc OCPC of the brand to list products for.
   * @param page Page to be returned.
   * @param count The number of items to return. Default 10. Max 50.
   * @param sort How to sort the items.
   */
  def getBrandProducts(ocpc: String, page: Option[Int] = None, count: Option[Int], sort: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse2009] =
    ApiRequest[InlineResponse2009](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands/{ocpc}/products", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("count", count)
      .withQueryParam("sort", sort)
      .withPathParam("ocpc", ocpc)
      .withSuccessResponse[InlineResponse2009](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * Returns a paginated list of brands.
   * 
   * Expected answers:
   *   code 200 : InlineResponse2005 (Successful operation.)
   *   code 400 :  (Invalid OCPC supplied.)
   *   code 401 :  (Unauthorized action.)
   *   code 404 :  (Brand not found.)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param page Page to be returned.
   * @param count The number of items to return. Default 10. Max 50.
   * @param sort How to sort the items.
   */
  def getBrands(page: Option[Int] = None, count: Option[Int], sort: Option[String])(implicit apiKey: ApiKeyValue): ApiRequest[InlineResponse2005] =
    ApiRequest[InlineResponse2005](ApiMethods.GET, "https://api.otreeba.com/v1", "/brands", "application/json")
      .withApiKey(apiKey, "X-API-Key", HEADER)
      .withQueryParam("page", page)
      .withQueryParam("count", count)
      .withQueryParam("sort", sort)
      .withSuccessResponse[InlineResponse2005](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      

}


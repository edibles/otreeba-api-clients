/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Brand".equalsIgnoreCase(className)) {
      return new TypeToken<List<Brand>>(){}.getType();
    }
    
    if ("Edible".equalsIgnoreCase(className)) {
      return new TypeToken<List<Edible>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("Extract".equalsIgnoreCase(className)) {
      return new TypeToken<List<Extract>>(){}.getType();
    }
    
    if ("Flower".equalsIgnoreCase(className)) {
      return new TypeToken<List<Flower>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001>>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20010>>(){}.getType();
    }
    
    if ("InlineResponse20010Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20010Meta>>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20011>>(){}.getType();
    }
    
    if ("InlineResponse20011Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20011Meta>>(){}.getType();
    }
    
    if ("InlineResponse2001Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001Meta>>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002>>(){}.getType();
    }
    
    if ("InlineResponse2002Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002Meta>>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003>>(){}.getType();
    }
    
    if ("InlineResponse2003Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003Meta>>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2004>>(){}.getType();
    }
    
    if ("InlineResponse2004Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2004Meta>>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2005>>(){}.getType();
    }
    
    if ("InlineResponse2005Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2005Meta>>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2006>>(){}.getType();
    }
    
    if ("InlineResponse2006Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2006Meta>>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2007>>(){}.getType();
    }
    
    if ("InlineResponse2007Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2007Meta>>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2008>>(){}.getType();
    }
    
    if ("InlineResponse2008Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2008Meta>>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2009>>(){}.getType();
    }
    
    if ("InlineResponse2009Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2009Meta>>(){}.getType();
    }
    
    if ("InlineResponse200Meta".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200Meta>>(){}.getType();
    }
    
    if ("Pagination".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pagination>>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<List<Product>>(){}.getType();
    }
    
    if ("SeedCompany".equalsIgnoreCase(className)) {
      return new TypeToken<List<SeedCompany>>(){}.getType();
    }
    
    if ("Strain".equalsIgnoreCase(className)) {
      return new TypeToken<List<Strain>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Brand".equalsIgnoreCase(className)) {
      return new TypeToken<Brand>(){}.getType();
    }
    
    if ("Edible".equalsIgnoreCase(className)) {
      return new TypeToken<Edible>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("Extract".equalsIgnoreCase(className)) {
      return new TypeToken<Extract>(){}.getType();
    }
    
    if ("Flower".equalsIgnoreCase(className)) {
      return new TypeToken<Flower>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20010>(){}.getType();
    }
    
    if ("InlineResponse20010Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20010Meta>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20011>(){}.getType();
    }
    
    if ("InlineResponse20011Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20011Meta>(){}.getType();
    }
    
    if ("InlineResponse2001Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001Meta>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002>(){}.getType();
    }
    
    if ("InlineResponse2002Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002Meta>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003>(){}.getType();
    }
    
    if ("InlineResponse2003Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003Meta>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2004>(){}.getType();
    }
    
    if ("InlineResponse2004Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2004Meta>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2005>(){}.getType();
    }
    
    if ("InlineResponse2005Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2005Meta>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2006>(){}.getType();
    }
    
    if ("InlineResponse2006Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2006Meta>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2007>(){}.getType();
    }
    
    if ("InlineResponse2007Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2007Meta>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2008>(){}.getType();
    }
    
    if ("InlineResponse2008Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2008Meta>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2009>(){}.getType();
    }
    
    if ("InlineResponse2009Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2009Meta>(){}.getType();
    }
    
    if ("InlineResponse200Meta".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200Meta>(){}.getType();
    }
    
    if ("Pagination".equalsIgnoreCase(className)) {
      return new TypeToken<Pagination>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<Product>(){}.getType();
    }
    
    if ("SeedCompany".equalsIgnoreCase(className)) {
      return new TypeToken<SeedCompany>(){}.getType();
    }
    
    if ("Strain".equalsIgnoreCase(className)) {
      return new TypeToken<Strain>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};

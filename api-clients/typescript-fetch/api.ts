/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://api.otreeba.com/v1".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface Brand {
    /**
     * Name of the brand.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the brand.
     */
    "ocpc"?: string;
    /**
     * URL for brand on Otreeba.
     */
    "link"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for brand on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for logo for brand.
     */
    "image"?: string;
    /**
     * OCPCs of the flowers from this brand.
     */
    "flowers"?: Array<string>;
    /**
     * OCPCs of the extracts from this brand.
     */
    "extracts"?: Array<string>;
    /**
     * OCPCs of the edibles from this brand.
     */
    "edibles"?: Array<string>;
    /**
     * OCPCs of the products from this brand.
     */
    "products"?: Array<string>;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface Edible {
    /**
     * Name of the edible.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the edible.
     */
    "ocpc"?: string;
    /**
     * Name and Open Cannabis Product Code of the brand that created this edible.
     */
    "brand"?: any;
    /**
     * Type of edible.
     */
    "type"?: string;
    /**
     * Name and Open Cannabis Product Code of the strain for this edible.
     */
    "strain"?: any;
    /**
     * Description of the edible.
     */
    "description"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for the edible on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for the main photo of the edible.
     */
    "image"?: string;
    /**
     * URL for the PDF containing lab testing information for this edible.
     */
    "labTest"?: string;
    /**
     * THC measurement for this edible.
     */
    "thc"?: string;
    /**
     * CBD measurement for this edible.
     */
    "cbd"?: string;
    /**
     * Cannabis measurement for this edible.
     */
    "cannabis"?: string;
    /**
     * Hash oil measurement for this edible.
     */
    "hashOil"?: string;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface Extract {
    /**
     * Name of the extract.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the extract.
     */
    "ocpc"?: string;
    /**
     * Name and Open Cannabis Product Code of the brand that created these extract.
     */
    "brand"?: any;
    /**
     * Type of extract.
     */
    "type"?: string;
    /**
     * Name and Open Cannabis Product Code of the strain for these extract.
     */
    "strain"?: any;
    /**
     * Description of the extract.
     */
    "description"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for the extract on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for the main photo of the extract.
     */
    "image"?: string;
    /**
     * URL for the PDF containing lab testing information for these extract.
     */
    "labTest"?: string;
    /**
     * THC measurement for these extract.
     */
    "thc"?: string;
    /**
     * CBD measurement for these extract.
     */
    "cbd"?: string;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface Flower {
    /**
     * Name of the flowers.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the flowers.
     */
    "ocpc"?: string;
    /**
     * Name and Open Cannabis Product Code of the brand that created these flowers.
     */
    "brand"?: any;
    /**
     * Type of flowers.
     */
    "type"?: string;
    /**
     * Name and Open Cannabis Product Code of the strain for these flowers.
     */
    "strain"?: any;
    /**
     * Description of the flowers.
     */
    "description"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for the flowers on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for the main photo of the flowers.
     */
    "image"?: string;
    /**
     * URL for the PDF containing lab testing information for these flowers.
     */
    "labTest"?: string;
    /**
     * THC measurement for these flowers.
     */
    "thc"?: string;
    /**
     * CBD measurement for these flowers.
     */
    "cbd"?: string;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface InlineResponse200 {
    "meta"?: InlineResponse200Meta;
}

export interface InlineResponse2001 {
    /**
     * Gets the current list of Seed Comapnies.
     */
    "meta"?: Meta;
}

export interface InlineResponse20010 {
    /**
     * Gets the current list of Products.
     */
    "meta"?: Meta;
}

export interface InlineResponse20011 {
    /**
     * Gets the current list of Strains.
     */
    "meta"?: Meta;
}

export interface InlineResponse2002 {
    /**
     * Gets the current list of Edibles.
     */
    "meta"?: Meta;
}

export interface InlineResponse2003 {
    /**
     * Gets the current list of Extracts.
     */
    "meta"?: Meta;
}

export interface InlineResponse2004 {
    /**
     * Gets the current list of Flowers.
     */
    "meta"?: Meta;
}

export interface InlineResponse2005 {
    /**
     * Gets the current list of Brands.
     */
    "meta"?: Meta;
}

export interface InlineResponse2006 {
    /**
     * Gets the current list of Flowers for a Brand.
     */
    "meta"?: Meta;
}

export interface InlineResponse2007 {
    /**
     * Gets the current list of Extracts for a Brand.
     */
    "meta"?: Meta;
}

export interface InlineResponse2008 {
    /**
     * Gets the current list of Edibles for a Brand.
     */
    "meta"?: Meta;
}

export interface InlineResponse2009 {
    /**
     * Gets the current list of Products for a Brand.
     */
    "meta"?: Meta;
}

/**
 * Gets the Strains for a Seed Company listing from a given OCPC.
 */
export interface InlineResponse200Meta {
    /**
     * Gets the Strains for a Seed Company listing from a given OCPC.
     */
    "pagination"?: Pagination;
}

export interface Meta {
    /**
     * Information about the pagination of the data.
     */
    "pagination"?: any;
}

export interface ModelError {
    "code": number;
    "message": string;
}

export interface Pagination {
    /**
     * Total number of results available.
     */
    "total"?: number;
    /**
     * Number of results to return. Default 10. Max 50.
     */
    "count"?: number;
    /**
     * Number of results per page.
     */
    "perPage"?: number;
    /**
     * Page of results.
     */
    "currentPage"?: number;
    /**
     * Total number of pages of results.
     */
    "totalPages"?: number;
    /**
     * Links to the previous and/or next pages of results.
     */
    "links"?: any;
}

export interface Product {
    /**
     * Name of the product.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the product.
     */
    "ocpc"?: string;
    /**
     * Name and Open Cannabis Product Code of the brand that created this product.
     */
    "brand"?: any;
    /**
     * Type of product.
     */
    "type"?: string;
    /**
     * Name and Open Cannabis Product Code of the strain for this product.
     */
    "strain"?: any;
    /**
     * Description of the product.
     */
    "description"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for the product on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for the main photo of the product.
     */
    "image"?: string;
    /**
     * URL for the PDF containing lab testing information for this product.
     */
    "labTest"?: string;
    /**
     * THC measurement for this product.
     */
    "thc"?: string;
    /**
     * CBD measurement for this product.
     */
    "cbd"?: string;
    /**
     * Cannabis measurement for this product.
     */
    "cannabis"?: string;
    /**
     * Hash oil measurement for this product.
     */
    "hashOil"?: string;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface SeedCompany {
    /**
     * Name of the seed company.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the seed company.
     */
    "ocpc"?: string;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for seed company on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for logo for seed company.
     */
    "image"?: string;
    /**
     * Object of countries that this seed company has lineages from. {'Country Name' => 'ISO 3166-1 Two Letter Country Code'}
     */
    "lineage"?: any;
    /**
     * OCPCs of the strains from this seed company.
     */
    "strains"?: Array<string>;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}

export interface Strain {
    /**
     * Name of the strain.
     */
    "name": string;
    /**
     * Open Cannabis Product Code for the strain.
     */
    "ocpc"?: string;
    /**
     * Name and Open Cannabis Product Code of the seed company that created the strain.
     */
    "seedCompany"?: any;
    /**
     * URL for QR that leads to page on Cannabis Reports.
     */
    "qr"?: string;
    /**
     * URL for strain on Cannabis Reports.
     */
    "url"?: string;
    /**
     * URL for the main photo of the strain.
     */
    "image"?: string;
    /**
     * Object of countries that this strain has lineages from. {'Country Name' => 'ISO 3166-1 Two Letter Country Code'}
     */
    "lineage"?: any;
    /**
     * Names of the parents of the strains and their associated Open Cannabis Product Codes.
     */
    "genetics"?: any;
    /**
     * Open Cannabis Product Codes of the children of this strain.
     */
    "children"?: Array<string>;
    /**
     * Date and time record was created, UTC.
     */
    "createdAt"?: Date;
    /**
     * Date and time record was updated, UTC.
     */
    "updatedAt"?: Date;
}



/**
 * BrandsApi - fetch parameter creator
 */
export const BrandsApiFetchParamCreator = {
    /** 
     * Find brand by Open Cannabis Product Code (OCPC).
     * Returns a single brand.
     * @param ocpc OCPC of the brand to return.
     */
    getBrandByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getBrandByOcpc");
        }
        const baseUrl = `/brands/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current edibles for the given brand.
     * Returns a paginated list of edibles.
     * @param ocpc OCPC of the brand to list edibles for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandEdibles(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getBrandEdibles");
        }
        const baseUrl = `/brands/{ocpc}/edibles`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current extracts for the given brand.
     * Returns a paginated list of extracts.
     * @param ocpc OCPC of the brand to list extracts for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandExtracts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getBrandExtracts");
        }
        const baseUrl = `/brands/{ocpc}/extracts`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current flowers for the given brand.
     * Returns a paginated list of flowers.
     * @param ocpc OCPC of the brand to list flowers for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandFlowers(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getBrandFlowers");
        }
        const baseUrl = `/brands/{ocpc}/flowers`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current products for the given brand.
     * Returns a paginated list of products.
     * @param ocpc OCPC of the brand to list products for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandProducts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getBrandProducts");
        }
        const baseUrl = `/brands/{ocpc}/products`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current brands.
     * Returns a paginated list of brands.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrands(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/brands`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * BrandsApi - functional programming interface
 */
export const BrandsApiFp = {
    /** 
     * Find brand by Open Cannabis Product Code (OCPC).
     * Returns a single brand.
     * @param ocpc OCPC of the brand to return.
     */
    getBrandByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Brand> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrandByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current edibles for the given brand.
     * Returns a paginated list of edibles.
     * @param ocpc OCPC of the brand to list edibles for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandEdibles(params: { "ocpc": string; "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrandEdibles(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current extracts for the given brand.
     * Returns a paginated list of extracts.
     * @param ocpc OCPC of the brand to list extracts for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandExtracts(params: { "ocpc": string; "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2007> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrandExtracts(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current flowers for the given brand.
     * Returns a paginated list of flowers.
     * @param ocpc OCPC of the brand to list flowers for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandFlowers(params: { "ocpc": string; "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2006> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrandFlowers(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current products for the given brand.
     * Returns a paginated list of products.
     * @param ocpc OCPC of the brand to list products for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandProducts(params: { "ocpc": string; "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrandProducts(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current brands.
     * Returns a paginated list of brands.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrands(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
        const fetchArgs = BrandsApiFetchParamCreator.getBrands(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * BrandsApi - object-oriented interface
 */
export class BrandsApi extends BaseAPI {
    /** 
     * Find brand by Open Cannabis Product Code (OCPC).
     * Returns a single brand.
     * @param ocpc OCPC of the brand to return.
     */
    getBrandByOcpc(params: {  "ocpc": string; }, options?: any) {
        return BrandsApiFp.getBrandByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current edibles for the given brand.
     * Returns a paginated list of edibles.
     * @param ocpc OCPC of the brand to list edibles for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandEdibles(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return BrandsApiFp.getBrandEdibles(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current extracts for the given brand.
     * Returns a paginated list of extracts.
     * @param ocpc OCPC of the brand to list extracts for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandExtracts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return BrandsApiFp.getBrandExtracts(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current flowers for the given brand.
     * Returns a paginated list of flowers.
     * @param ocpc OCPC of the brand to list flowers for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandFlowers(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return BrandsApiFp.getBrandFlowers(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current products for the given brand.
     * Returns a paginated list of products.
     * @param ocpc OCPC of the brand to list products for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrandProducts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return BrandsApiFp.getBrandProducts(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current brands.
     * Returns a paginated list of brands.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getBrands(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return BrandsApiFp.getBrands(params, options)(this.fetch, this.basePath);
    }
};

/**
 * BrandsApi - factory interface
 */
export const BrandsApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find brand by Open Cannabis Product Code (OCPC).
         * Returns a single brand.
         * @param ocpc OCPC of the brand to return.
         */
        getBrandByOcpc(params: {  "ocpc": string; }, options?: any) {
            return BrandsApiFp.getBrandByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current edibles for the given brand.
         * Returns a paginated list of edibles.
         * @param ocpc OCPC of the brand to list edibles for.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getBrandEdibles(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return BrandsApiFp.getBrandEdibles(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current extracts for the given brand.
         * Returns a paginated list of extracts.
         * @param ocpc OCPC of the brand to list extracts for.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getBrandExtracts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return BrandsApiFp.getBrandExtracts(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current flowers for the given brand.
         * Returns a paginated list of flowers.
         * @param ocpc OCPC of the brand to list flowers for.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getBrandFlowers(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return BrandsApiFp.getBrandFlowers(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current products for the given brand.
         * Returns a paginated list of products.
         * @param ocpc OCPC of the brand to list products for.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getBrandProducts(params: {  "ocpc": string; "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return BrandsApiFp.getBrandProducts(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current brands.
         * Returns a paginated list of brands.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getBrands(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return BrandsApiFp.getBrands(params, options)(fetch, basePath);
        },
    };
};


/**
 * EdiblesApi - fetch parameter creator
 */
export const EdiblesApiFetchParamCreator = {
    /** 
     * Find edible by Open Cannabis Product Code (OCPC).
     * Returns a single edible.
     * @param ocpc OCPC of the edible to return.
     */
    getEdibleByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getEdibleByOcpc");
        }
        const baseUrl = `/edibles/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current edibles.
     * Returns a paginated list of edibles.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getEdibles(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/edibles`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * EdiblesApi - functional programming interface
 */
export const EdiblesApiFp = {
    /** 
     * Find edible by Open Cannabis Product Code (OCPC).
     * Returns a single edible.
     * @param ocpc OCPC of the edible to return.
     */
    getEdibleByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Edible> {
        const fetchArgs = EdiblesApiFetchParamCreator.getEdibleByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current edibles.
     * Returns a paginated list of edibles.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getEdibles(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
        const fetchArgs = EdiblesApiFetchParamCreator.getEdibles(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * EdiblesApi - object-oriented interface
 */
export class EdiblesApi extends BaseAPI {
    /** 
     * Find edible by Open Cannabis Product Code (OCPC).
     * Returns a single edible.
     * @param ocpc OCPC of the edible to return.
     */
    getEdibleByOcpc(params: {  "ocpc": string; }, options?: any) {
        return EdiblesApiFp.getEdibleByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current edibles.
     * Returns a paginated list of edibles.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getEdibles(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return EdiblesApiFp.getEdibles(params, options)(this.fetch, this.basePath);
    }
};

/**
 * EdiblesApi - factory interface
 */
export const EdiblesApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find edible by Open Cannabis Product Code (OCPC).
         * Returns a single edible.
         * @param ocpc OCPC of the edible to return.
         */
        getEdibleByOcpc(params: {  "ocpc": string; }, options?: any) {
            return EdiblesApiFp.getEdibleByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current edibles.
         * Returns a paginated list of edibles.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getEdibles(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return EdiblesApiFp.getEdibles(params, options)(fetch, basePath);
        },
    };
};


/**
 * ExtractsApi - fetch parameter creator
 */
export const ExtractsApiFetchParamCreator = {
    /** 
     * Find extract by Open Cannabis Product Code (OCPC).
     * Returns a single extract.
     * @param ocpc OCPC of the extract to return.
     */
    getExtractByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getExtractByOcpc");
        }
        const baseUrl = `/extracts/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current extracts.
     * Returns a paginated list of extracts.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getExtracts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/extracts`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * ExtractsApi - functional programming interface
 */
export const ExtractsApiFp = {
    /** 
     * Find extract by Open Cannabis Product Code (OCPC).
     * Returns a single extract.
     * @param ocpc OCPC of the extract to return.
     */
    getExtractByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Extract> {
        const fetchArgs = ExtractsApiFetchParamCreator.getExtractByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current extracts.
     * Returns a paginated list of extracts.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getExtracts(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
        const fetchArgs = ExtractsApiFetchParamCreator.getExtracts(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ExtractsApi - object-oriented interface
 */
export class ExtractsApi extends BaseAPI {
    /** 
     * Find extract by Open Cannabis Product Code (OCPC).
     * Returns a single extract.
     * @param ocpc OCPC of the extract to return.
     */
    getExtractByOcpc(params: {  "ocpc": string; }, options?: any) {
        return ExtractsApiFp.getExtractByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current extracts.
     * Returns a paginated list of extracts.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getExtracts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return ExtractsApiFp.getExtracts(params, options)(this.fetch, this.basePath);
    }
};

/**
 * ExtractsApi - factory interface
 */
export const ExtractsApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find extract by Open Cannabis Product Code (OCPC).
         * Returns a single extract.
         * @param ocpc OCPC of the extract to return.
         */
        getExtractByOcpc(params: {  "ocpc": string; }, options?: any) {
            return ExtractsApiFp.getExtractByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current extracts.
         * Returns a paginated list of extracts.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getExtracts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return ExtractsApiFp.getExtracts(params, options)(fetch, basePath);
        },
    };
};


/**
 * FlowersApi - fetch parameter creator
 */
export const FlowersApiFetchParamCreator = {
    /** 
     * Find flower by Open Cannabis Product Code (OCPC).
     * Returns a single flower.
     * @param ocpc OCPC of the flower to return.
     */
    getFlowerByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getFlowerByOcpc");
        }
        const baseUrl = `/flowers/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current flowers.
     * Returns a paginated list of flowers.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getFlowers(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/flowers`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * FlowersApi - functional programming interface
 */
export const FlowersApiFp = {
    /** 
     * Find flower by Open Cannabis Product Code (OCPC).
     * Returns a single flower.
     * @param ocpc OCPC of the flower to return.
     */
    getFlowerByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Flower> {
        const fetchArgs = FlowersApiFetchParamCreator.getFlowerByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current flowers.
     * Returns a paginated list of flowers.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getFlowers(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
        const fetchArgs = FlowersApiFetchParamCreator.getFlowers(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * FlowersApi - object-oriented interface
 */
export class FlowersApi extends BaseAPI {
    /** 
     * Find flower by Open Cannabis Product Code (OCPC).
     * Returns a single flower.
     * @param ocpc OCPC of the flower to return.
     */
    getFlowerByOcpc(params: {  "ocpc": string; }, options?: any) {
        return FlowersApiFp.getFlowerByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current flowers.
     * Returns a paginated list of flowers.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getFlowers(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return FlowersApiFp.getFlowers(params, options)(this.fetch, this.basePath);
    }
};

/**
 * FlowersApi - factory interface
 */
export const FlowersApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find flower by Open Cannabis Product Code (OCPC).
         * Returns a single flower.
         * @param ocpc OCPC of the flower to return.
         */
        getFlowerByOcpc(params: {  "ocpc": string; }, options?: any) {
            return FlowersApiFp.getFlowerByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current flowers.
         * Returns a paginated list of flowers.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getFlowers(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return FlowersApiFp.getFlowers(params, options)(fetch, basePath);
        },
    };
};


/**
 * ProductsApi - fetch parameter creator
 */
export const ProductsApiFetchParamCreator = {
    /** 
     * Find product by Open Cannabis Product Code (OCPC).
     * Returns a single product.
     * @param ocpc OCPC of the product to return.
     */
    getProductByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getProductByOcpc");
        }
        const baseUrl = `/products/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current products.
     * Returns a paginated list of products.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getProducts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/products`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * ProductsApi - functional programming interface
 */
export const ProductsApiFp = {
    /** 
     * Find product by Open Cannabis Product Code (OCPC).
     * Returns a single product.
     * @param ocpc OCPC of the product to return.
     */
    getProductByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
        const fetchArgs = ProductsApiFetchParamCreator.getProductByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current products.
     * Returns a paginated list of products.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getProducts(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20010> {
        const fetchArgs = ProductsApiFetchParamCreator.getProducts(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ProductsApi - object-oriented interface
 */
export class ProductsApi extends BaseAPI {
    /** 
     * Find product by Open Cannabis Product Code (OCPC).
     * Returns a single product.
     * @param ocpc OCPC of the product to return.
     */
    getProductByOcpc(params: {  "ocpc": string; }, options?: any) {
        return ProductsApiFp.getProductByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current products.
     * Returns a paginated list of products.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getProducts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return ProductsApiFp.getProducts(params, options)(this.fetch, this.basePath);
    }
};

/**
 * ProductsApi - factory interface
 */
export const ProductsApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find product by Open Cannabis Product Code (OCPC).
         * Returns a single product.
         * @param ocpc OCPC of the product to return.
         */
        getProductByOcpc(params: {  "ocpc": string; }, options?: any) {
            return ProductsApiFp.getProductByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current products.
         * Returns a paginated list of products.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getProducts(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return ProductsApiFp.getProducts(params, options)(fetch, basePath);
        },
    };
};


/**
 * SeedCompaniesApi - fetch parameter creator
 */
export const SeedCompaniesApiFetchParamCreator = {
    /** 
     * Get a list of all current seed companies.
     * Returns a paginated list of seed companies.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getSeedCompanies(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/seed-companies`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Find seed company by Open Cannabis Product Code (OCPC).
     * Returns a single seed company.
     * @param ocpc OCPC of the seed company to return.
     */
    getSeedCompanyByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getSeedCompanyByOcpc");
        }
        const baseUrl = `/seed-companies/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Find strains for a seed company by Open Cannabis Product Code (OCPC).
     * Returns a paginated list of strains for a single seed company.
     * @param ocpc OCPC of the seed company to return strains for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     */
    getSeedCompanyStrainsByOcpc(params: {  "ocpc": string; "page"?: number; "count"?: number; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getSeedCompanyStrainsByOcpc");
        }
        const baseUrl = `/seed-companies/{ocpc}/strains`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * SeedCompaniesApi - functional programming interface
 */
export const SeedCompaniesApiFp = {
    /** 
     * Get a list of all current seed companies.
     * Returns a paginated list of seed companies.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getSeedCompanies(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
        const fetchArgs = SeedCompaniesApiFetchParamCreator.getSeedCompanies(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Find seed company by Open Cannabis Product Code (OCPC).
     * Returns a single seed company.
     * @param ocpc OCPC of the seed company to return.
     */
    getSeedCompanyByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SeedCompany> {
        const fetchArgs = SeedCompaniesApiFetchParamCreator.getSeedCompanyByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Find strains for a seed company by Open Cannabis Product Code (OCPC).
     * Returns a paginated list of strains for a single seed company.
     * @param ocpc OCPC of the seed company to return strains for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     */
    getSeedCompanyStrainsByOcpc(params: { "ocpc": string; "page"?: number; "count"?: number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
        const fetchArgs = SeedCompaniesApiFetchParamCreator.getSeedCompanyStrainsByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * SeedCompaniesApi - object-oriented interface
 */
export class SeedCompaniesApi extends BaseAPI {
    /** 
     * Get a list of all current seed companies.
     * Returns a paginated list of seed companies.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getSeedCompanies(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return SeedCompaniesApiFp.getSeedCompanies(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Find seed company by Open Cannabis Product Code (OCPC).
     * Returns a single seed company.
     * @param ocpc OCPC of the seed company to return.
     */
    getSeedCompanyByOcpc(params: {  "ocpc": string; }, options?: any) {
        return SeedCompaniesApiFp.getSeedCompanyByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Find strains for a seed company by Open Cannabis Product Code (OCPC).
     * Returns a paginated list of strains for a single seed company.
     * @param ocpc OCPC of the seed company to return strains for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     */
    getSeedCompanyStrainsByOcpc(params: {  "ocpc": string; "page"?: number; "count"?: number; }, options?: any) {
        return SeedCompaniesApiFp.getSeedCompanyStrainsByOcpc(params, options)(this.fetch, this.basePath);
    }
};

/**
 * SeedCompaniesApi - factory interface
 */
export const SeedCompaniesApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Get a list of all current seed companies.
         * Returns a paginated list of seed companies.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getSeedCompanies(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return SeedCompaniesApiFp.getSeedCompanies(params, options)(fetch, basePath);
        },
        /** 
         * Find seed company by Open Cannabis Product Code (OCPC).
         * Returns a single seed company.
         * @param ocpc OCPC of the seed company to return.
         */
        getSeedCompanyByOcpc(params: {  "ocpc": string; }, options?: any) {
            return SeedCompaniesApiFp.getSeedCompanyByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Find strains for a seed company by Open Cannabis Product Code (OCPC).
         * Returns a paginated list of strains for a single seed company.
         * @param ocpc OCPC of the seed company to return strains for.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         */
        getSeedCompanyStrainsByOcpc(params: {  "ocpc": string; "page"?: number; "count"?: number; }, options?: any) {
            return SeedCompaniesApiFp.getSeedCompanyStrainsByOcpc(params, options)(fetch, basePath);
        },
    };
};


/**
 * StrainsApi - fetch parameter creator
 */
export const StrainsApiFetchParamCreator = {
    /** 
     * Find strain by Open Cannabis Product Code (OCPC).
     * Returns a single strain.
     * @param ocpc OCPC of the strain to return.
     */
    getStrainByOcpc(params: {  "ocpc": string; }, options?: any): FetchArgs {
        // verify required parameter "ocpc" is set
        if (params["ocpc"] == null) {
            throw new Error("Missing required parameter ocpc when calling getStrainByOcpc");
        }
        const baseUrl = `/strains/{ocpc}`
            .replace(`{${"ocpc"}}`, `${ params["ocpc"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of all current strains.
     * Returns a paginated list of strains.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getStrains(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/strains`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
            "count": params["count"],
            "sort": params["sort"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * StrainsApi - functional programming interface
 */
export const StrainsApiFp = {
    /** 
     * Find strain by Open Cannabis Product Code (OCPC).
     * Returns a single strain.
     * @param ocpc OCPC of the strain to return.
     */
    getStrainByOcpc(params: { "ocpc": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Strain> {
        const fetchArgs = StrainsApiFetchParamCreator.getStrainByOcpc(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of all current strains.
     * Returns a paginated list of strains.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getStrains(params: { "page"?: number; "count"?: number; "sort"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20011> {
        const fetchArgs = StrainsApiFetchParamCreator.getStrains(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * StrainsApi - object-oriented interface
 */
export class StrainsApi extends BaseAPI {
    /** 
     * Find strain by Open Cannabis Product Code (OCPC).
     * Returns a single strain.
     * @param ocpc OCPC of the strain to return.
     */
    getStrainByOcpc(params: {  "ocpc": string; }, options?: any) {
        return StrainsApiFp.getStrainByOcpc(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of all current strains.
     * Returns a paginated list of strains.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    getStrains(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
        return StrainsApiFp.getStrains(params, options)(this.fetch, this.basePath);
    }
};

/**
 * StrainsApi - factory interface
 */
export const StrainsApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Find strain by Open Cannabis Product Code (OCPC).
         * Returns a single strain.
         * @param ocpc OCPC of the strain to return.
         */
        getStrainByOcpc(params: {  "ocpc": string; }, options?: any) {
            return StrainsApiFp.getStrainByOcpc(params, options)(fetch, basePath);
        },
        /** 
         * Get a list of all current strains.
         * Returns a paginated list of strains.
         * @param page Page to be returned.
         * @param count The number of items to return. Default 10. Max 50.
         * @param sort How to sort the items.
         */
        getStrains(params: {  "page"?: number; "count"?: number; "sort"?: string; }, options?: any) {
            return StrainsApiFp.getStrains(params, options)(fetch, basePath);
        },
    };
};


/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSeedCompany.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSeedCompany::SWGSeedCompany(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSeedCompany::SWGSeedCompany() {
    init();
}

SWGSeedCompany::~SWGSeedCompany() {
    this->cleanup();
}

void
SWGSeedCompany::init() {
    name = new QString("");
    ocpc = new QString("");
    qr = new QString("");
    url = new QString("");
    image = new QString("");
    lineage = NULL;
    strains = new QList<QString*>();
    created_at = NULL;
    updated_at = NULL;
}

void
SWGSeedCompany::cleanup() {
    
    if(name != nullptr) {
        delete name;
    }

    if(ocpc != nullptr) {
        delete ocpc;
    }

    if(qr != nullptr) {
        delete qr;
    }

    if(url != nullptr) {
        delete url;
    }

    if(image != nullptr) {
        delete image;
    }

    if(lineage != nullptr) {
        delete lineage;
    }

    if(strains != nullptr) {
        QList<QString*>* arr = strains;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete strains;
    }

    if(created_at != nullptr) {
        delete created_at;
    }

    if(updated_at != nullptr) {
        delete updated_at;
    }
}

SWGSeedCompany*
SWGSeedCompany::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSeedCompany::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&ocpc, pJson["ocpc"], "QString", "QString");
    ::Swagger::setValue(&qr, pJson["qr"], "QString", "QString");
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
    ::Swagger::setValue(&image, pJson["image"], "QString", "QString");
    ::Swagger::setValue(&lineage, pJson["lineage"], "SWGObject", "SWGObject");
    
    ::Swagger::setValue(&strains, pJson["strains"], "QList", "QString");
    
    ::Swagger::setValue(&created_at, pJson["createdAt"], "QDateTime", "QDateTime");
    ::Swagger::setValue(&updated_at, pJson["updatedAt"], "QDateTime", "QDateTime");
}

QString
SWGSeedCompany::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSeedCompany::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("ocpc"), ocpc, obj, QString("QString"));

    toJsonValue(QString("qr"), qr, obj, QString("QString"));

    toJsonValue(QString("url"), url, obj, QString("QString"));

    toJsonValue(QString("image"), image, obj, QString("QString"));

    toJsonValue(QString("lineage"), lineage, obj, QString("SWGObject"));

    QJsonArray strainsJsonArray;
    toJsonArray((QList<void*>*)strains, &strainsJsonArray, "strains", "QString");
    obj->insert("strains", strainsJsonArray);

    toJsonValue(QString("createdAt"), created_at, obj, QString("QDateTime"));

    toJsonValue(QString("updatedAt"), updated_at, obj, QString("QDateTime"));

    return obj;
}

QString*
SWGSeedCompany::getName() {
    return name;
}
void
SWGSeedCompany::setName(QString* name) {
    this->name = name;
}

QString*
SWGSeedCompany::getOcpc() {
    return ocpc;
}
void
SWGSeedCompany::setOcpc(QString* ocpc) {
    this->ocpc = ocpc;
}

QString*
SWGSeedCompany::getQr() {
    return qr;
}
void
SWGSeedCompany::setQr(QString* qr) {
    this->qr = qr;
}

QString*
SWGSeedCompany::getUrl() {
    return url;
}
void
SWGSeedCompany::setUrl(QString* url) {
    this->url = url;
}

QString*
SWGSeedCompany::getImage() {
    return image;
}
void
SWGSeedCompany::setImage(QString* image) {
    this->image = image;
}

SWGObject*
SWGSeedCompany::getLineage() {
    return lineage;
}
void
SWGSeedCompany::setLineage(SWGObject* lineage) {
    this->lineage = lineage;
}

QList<QString*>*
SWGSeedCompany::getStrains() {
    return strains;
}
void
SWGSeedCompany::setStrains(QList<QString*>* strains) {
    this->strains = strains;
}

QDateTime*
SWGSeedCompany::getCreatedAt() {
    return created_at;
}
void
SWGSeedCompany::setCreatedAt(QDateTime* created_at) {
    this->created_at = created_at;
}

QDateTime*
SWGSeedCompany::getUpdatedAt() {
    return updated_at;
}
void
SWGSeedCompany::setUpdatedAt(QDateTime* updated_at) {
    this->updated_at = updated_at;
}



} /* namespace Swagger */


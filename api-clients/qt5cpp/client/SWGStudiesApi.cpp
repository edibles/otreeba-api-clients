/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStudiesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGStudiesApi::SWGStudiesApi() {}

SWGStudiesApi::~SWGStudiesApi() {}

SWGStudiesApi::SWGStudiesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStudiesApi::getStudies(qint32 page, qint32 count, QString* sort) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/studies");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("count"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(count)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sort)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStudiesApi::getStudiesCallback);

    worker->execute(&input);
}

void
SWGStudiesApi::getStudiesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGInline_response_200_12* output = static_cast<SWGInline_response_200_12*>(create(json, QString("SWGInline_response_200_12")));
    worker->deleteLater();

    emit getStudiesSignal(output);
    emit getStudiesSignalE(output, error_type, error_str);
}

void
SWGStudiesApi::getStudiesByCondition(QString* condition_slug, qint32 page, qint32 count, QString* sort) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/studies/conditions/{conditionSlug}");

    QString condition_slugPathParam("{"); condition_slugPathParam.append("conditionSlug").append("}");
    fullPath.replace(condition_slugPathParam, stringValue(condition_slug));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("count"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(count)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sort)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStudiesApi::getStudiesByConditionCallback);

    worker->execute(&input);
}

void
SWGStudiesApi::getStudiesByConditionCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGInline_response_200_13* output = static_cast<SWGInline_response_200_13*>(create(json, QString("SWGInline_response_200_13")));
    worker->deleteLater();

    emit getStudiesByConditionSignal(output);
    emit getStudiesByConditionSignalE(output, error_type, error_str);
}

void
SWGStudiesApi::getStudiesConditions(QString* sort) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/studies/conditions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sort)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStudiesApi::getStudiesConditionsCallback);

    worker->execute(&input);
}

void
SWGStudiesApi::getStudiesConditionsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    worker->deleteLater();

    emit getStudiesConditionsSignal(output);
    emit getStudiesConditionsSignalE(output, error_type, error_str);
}

void
SWGStudiesApi::getStudyByIdentifier(QString* identifier_type, QString* identifier) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/studies/{identifierType}/{identifier}");

    QString identifier_typePathParam("{"); identifier_typePathParam.append("identifierType").append("}");
    fullPath.replace(identifier_typePathParam, stringValue(identifier_type));
    QString identifierPathParam("{"); identifierPathParam.append("identifier").append("}");
    fullPath.replace(identifierPathParam, stringValue(identifier));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStudiesApi::getStudyByIdentifierCallback);

    worker->execute(&input);
}

void
SWGStudiesApi::getStudyByIdentifierCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGStudy* output = static_cast<SWGStudy*>(create(json, QString("SWGStudy")));
    worker->deleteLater();

    emit getStudyByIdentifierSignal(output);
    emit getStudyByIdentifierSignalE(output, error_type, error_str);
}


}

/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class BrandsApi {
    protected basePath = 'https://api.otreeba.com/v1';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Find brand by Open Cannabis Product Code (OCPC).
        * Returns a single brand.
        * @param ocpc OCPC of the brand to return.
        */
    public getBrandByOcpc (ocpc: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Brand> {
        const localVarPath = this.basePath + '/brands/{ocpc}'
            .replace('{' + 'ocpc' + '}', String(ocpc));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandByOcpc.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a list of all current edibles for the given brand.
        * Returns a paginated list of edibles.
        * @param ocpc OCPC of the brand to list edibles for.
        * @param page Page to be returned.
        * @param count The number of items to return. Default 10. Max 50.
        * @param sort How to sort the items.
        */
    public getBrandEdibles (ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InlineResponse2008> {
        const localVarPath = this.basePath + '/brands/{ocpc}/edibles'
            .replace('{' + 'ocpc' + '}', String(ocpc));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandEdibles.');
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a list of all current extracts for the given brand.
        * Returns a paginated list of extracts.
        * @param ocpc OCPC of the brand to list extracts for.
        * @param page Page to be returned.
        * @param count The number of items to return. Default 10. Max 50.
        * @param sort How to sort the items.
        */
    public getBrandExtracts (ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InlineResponse2007> {
        const localVarPath = this.basePath + '/brands/{ocpc}/extracts'
            .replace('{' + 'ocpc' + '}', String(ocpc));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandExtracts.');
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a list of all current flowers for the given brand.
        * Returns a paginated list of flowers.
        * @param ocpc OCPC of the brand to list flowers for.
        * @param page Page to be returned.
        * @param count The number of items to return. Default 10. Max 50.
        * @param sort How to sort the items.
        */
    public getBrandFlowers (ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InlineResponse2006> {
        const localVarPath = this.basePath + '/brands/{ocpc}/flowers'
            .replace('{' + 'ocpc' + '}', String(ocpc));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandFlowers.');
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a list of all current products for the given brand.
        * Returns a paginated list of products.
        * @param ocpc OCPC of the brand to list products for.
        * @param page Page to be returned.
        * @param count The number of items to return. Default 10. Max 50.
        * @param sort How to sort the items.
        */
    public getBrandProducts (ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InlineResponse2009> {
        const localVarPath = this.basePath + '/brands/{ocpc}/products'
            .replace('{' + 'ocpc' + '}', String(ocpc));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandProducts.');
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get a list of all current brands.
        * Returns a paginated list of brands.
        * @param page Page to be returned.
        * @param count The number of items to return. Default 10. Max 50.
        * @param sort How to sort the items.
        */
    public getBrands (page?: number, count?: number, sort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InlineResponse2005> {
        const localVarPath = this.basePath + '/brands';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        if (sort !== undefined) {
            queryParameters['sort'] = sort;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}

=begin
#Otreeba Open Cannabis API

#This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).

OpenAPI spec version: 1.0.0
Contact: api@otreeba.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class StudiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of all current studies.
    # Returns a paginated list of studies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page to be returned.
    # @option opts [Integer] :count The number of items to return. Default 10. Max 50. (default to 10)
    # @option opts [String] :sort How to sort the items. (default to -createdAt)
    # @return [InlineResponse20012]
    def get_studies(opts = {})
      data, _status_code, _headers = get_studies_with_http_info(opts)
      return data
    end

    # Get a list of all current studies.
    # Returns a paginated list of studies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page to be returned.
    # @option opts [Integer] :count The number of items to return. Default 10. Max 50.
    # @option opts [String] :sort How to sort the items.
    # @return [Array<(InlineResponse20012, Fixnum, Hash)>] InlineResponse20012 data, response status code and response headers
    def get_studies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StudiesApi.get_studies ..."
      end
      if opts[:'sort'] && !['-createdAt', 'createdAt', '-updatedAt', 'updatedAt', '-name', 'name'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of -createdAt, createdAt, -updatedAt, updatedAt, -name, name'
      end
      # resource path
      local_var_path = "/studies".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudiesApi#get_studies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all current studies for a given condition.
    # Returns a paginated list of studies.
    # @param condition_slug Slug of the condition to return studies for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page to be returned.
    # @option opts [Integer] :count The number of items to return. Default 10. Max 50. (default to 10)
    # @option opts [String] :sort How to sort the items. (default to -year)
    # @return [InlineResponse20013]
    def get_studies_by_condition(condition_slug, opts = {})
      data, _status_code, _headers = get_studies_by_condition_with_http_info(condition_slug, opts)
      return data
    end

    # Get a list of all current studies for a given condition.
    # Returns a paginated list of studies.
    # @param condition_slug Slug of the condition to return studies for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page to be returned.
    # @option opts [Integer] :count The number of items to return. Default 10. Max 50.
    # @option opts [String] :sort How to sort the items.
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_studies_by_condition_with_http_info(condition_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StudiesApi.get_studies_by_condition ..."
      end
      # verify the required parameter 'condition_slug' is set
      fail ArgumentError, "Missing the required parameter 'condition_slug' when calling StudiesApi.get_studies_by_condition" if condition_slug.nil?
      if opts[:'sort'] && !['-year', 'year', '-createdAt', 'createdAt', '-updatedAt', 'updatedAt'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of -year, year, -createdAt, createdAt, -updatedAt, updatedAt'
      end
      # resource path
      local_var_path = "/studies/conditions/{conditionSlug}".sub('{format}','json').sub('{' + 'conditionSlug' + '}', condition_slug.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudiesApi#get_studies_by_condition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all current conditions for studies.
    # Returns a list of all current conditions for studies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort How to sort the items. (default to name)
    # @return [Object]
    def get_studies_conditions(opts = {})
      data, _status_code, _headers = get_studies_conditions_with_http_info(opts)
      return data
    end

    # Get a list of all current conditions for studies.
    # Returns a list of all current conditions for studies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort How to sort the items.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_studies_conditions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StudiesApi.get_studies_conditions ..."
      end
      if opts[:'sort'] && !['-createdAt', 'createdAt', '-updatedAt', 'updatedAt', '-name', 'name'].include?(opts[:'sort'])
        fail ArgumentError, 'invalid value for "sort", must be one of -createdAt, createdAt, -updatedAt, updatedAt, -name, name'
      end
      # resource path
      local_var_path = "/studies/conditions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudiesApi#get_studies_conditions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find study by DOI, PubMed ID, or slug.
    # Returns a single study.
    # @param identifier_type Type of identifier to for the study to return.
    # @param identifier Identifier for the study to return.
    # @param [Hash] opts the optional parameters
    # @return [Study]
    def get_study_by_identifier(identifier_type, identifier, opts = {})
      data, _status_code, _headers = get_study_by_identifier_with_http_info(identifier_type, identifier, opts)
      return data
    end

    # Find study by DOI, PubMed ID, or slug.
    # Returns a single study.
    # @param identifier_type Type of identifier to for the study to return.
    # @param identifier Identifier for the study to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Study, Fixnum, Hash)>] Study data, response status code and response headers
    def get_study_by_identifier_with_http_info(identifier_type, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StudiesApi.get_study_by_identifier ..."
      end
      # verify the required parameter 'identifier_type' is set
      fail ArgumentError, "Missing the required parameter 'identifier_type' when calling StudiesApi.get_study_by_identifier" if identifier_type.nil?
      # verify enum value
      unless ['doi', 'pubMedId', 'slug'].include?(identifier_type)
        fail ArgumentError, "invalid value for 'identifier_type', must be one of doi, pubMedId, slug"
      end
      # verify the required parameter 'identifier' is set
      fail ArgumentError, "Missing the required parameter 'identifier' when calling StudiesApi.get_study_by_identifier" if identifier.nil?
      # resource path
      local_var_path = "/studies/{identifierType}/{identifier}".sub('{format}','json').sub('{' + 'identifierType' + '}', identifier_type.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Study')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudiesApi#get_study_by_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

<?php
/**
 * Strain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Otreeba Open Cannabis API
 *
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Strain Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Strain implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Strain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'ocpc' => 'string',
        'seed_company' => 'object',
        'qr' => 'string',
        'url' => 'string',
        'image' => 'string',
        'lineage' => 'object',
        'genetics' => 'object',
        'children' => 'string[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'ocpc' => null,
        'seed_company' => null,
        'qr' => null,
        'url' => null,
        'image' => null,
        'lineage' => null,
        'genetics' => null,
        'children' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ocpc' => 'ocpc',
        'seed_company' => 'seedCompany',
        'qr' => 'qr',
        'url' => 'url',
        'image' => 'image',
        'lineage' => 'lineage',
        'genetics' => 'genetics',
        'children' => 'children',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ocpc' => 'setOcpc',
        'seed_company' => 'setSeedCompany',
        'qr' => 'setQr',
        'url' => 'setUrl',
        'image' => 'setImage',
        'lineage' => 'setLineage',
        'genetics' => 'setGenetics',
        'children' => 'setChildren',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ocpc' => 'getOcpc',
        'seed_company' => 'getSeedCompany',
        'qr' => 'getQr',
        'url' => 'getUrl',
        'image' => 'getImage',
        'lineage' => 'getLineage',
        'genetics' => 'getGenetics',
        'children' => 'getChildren',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ocpc'] = isset($data['ocpc']) ? $data['ocpc'] : null;
        $this->container['seed_company'] = isset($data['seed_company']) ? $data['seed_company'] : null;
        $this->container['qr'] = isset($data['qr']) ? $data['qr'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['lineage'] = isset($data['lineage']) ? $data['lineage'] : null;
        $this->container['genetics'] = isset($data['genetics']) ? $data['genetics'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the strain.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ocpc
     * @return string
     */
    public function getOcpc()
    {
        return $this->container['ocpc'];
    }

    /**
     * Sets ocpc
     * @param string $ocpc Open Cannabis Product Code for the strain.
     * @return $this
     */
    public function setOcpc($ocpc)
    {
        $this->container['ocpc'] = $ocpc;

        return $this;
    }

    /**
     * Gets seed_company
     * @return object
     */
    public function getSeedCompany()
    {
        return $this->container['seed_company'];
    }

    /**
     * Sets seed_company
     * @param object $seed_company Name and Open Cannabis Product Code of the seed company that created the strain.
     * @return $this
     */
    public function setSeedCompany($seed_company)
    {
        $this->container['seed_company'] = $seed_company;

        return $this;
    }

    /**
     * Gets qr
     * @return string
     */
    public function getQr()
    {
        return $this->container['qr'];
    }

    /**
     * Sets qr
     * @param string $qr URL for QR that leads to page on Cannabis Reports.
     * @return $this
     */
    public function setQr($qr)
    {
        $this->container['qr'] = $qr;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url URL for strain on Cannabis Reports.
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image URL for the main photo of the strain.
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets lineage
     * @return object
     */
    public function getLineage()
    {
        return $this->container['lineage'];
    }

    /**
     * Sets lineage
     * @param object $lineage Object of countries that this strain has lineages from. {'Country Name' => 'ISO 3166-1 Two Letter Country Code'}
     * @return $this
     */
    public function setLineage($lineage)
    {
        $this->container['lineage'] = $lineage;

        return $this;
    }

    /**
     * Gets genetics
     * @return object
     */
    public function getGenetics()
    {
        return $this->container['genetics'];
    }

    /**
     * Sets genetics
     * @param object $genetics Names of the parents of the strains and their associated Open Cannabis Product Codes.
     * @return $this
     */
    public function setGenetics($genetics)
    {
        $this->container['genetics'] = $genetics;

        return $this;
    }

    /**
     * Gets children
     * @return string[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     * @param string[] $children Open Cannabis Product Codes of the children of this strain.
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Date and time record was created, UTC.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at Date and time record was updated, UTC.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



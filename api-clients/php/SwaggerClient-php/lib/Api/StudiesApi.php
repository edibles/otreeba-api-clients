<?php
/**
 * StudiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Otreeba Open Cannabis API
 *
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * StudiesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StudiesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return StudiesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getStudies
     *
     * Get a list of all current studies.
     *
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -createdAt)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function getStudies($page = null, $count = '10', $sort = '-createdAt')
    {
        list($response) = $this->getStudiesWithHttpInfo($page, $count, $sort);
        return $response;
    }

    /**
     * Operation getStudiesWithHttpInfo
     *
     * Get a list of all current studies.
     *
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -createdAt)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudiesWithHttpInfo($page = null, $count = '10', $sort = '-createdAt')
    {
        // parse inputs
        $resourcePath = "/studies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20012',
                '/studies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStudiesByCondition
     *
     * Get a list of all current studies for a given condition.
     *
     * @param string $condition_slug Slug of the condition to return studies for. (required)
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -year)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse20013
     */
    public function getStudiesByCondition($condition_slug, $page = null, $count = '10', $sort = '-year')
    {
        list($response) = $this->getStudiesByConditionWithHttpInfo($condition_slug, $page, $count, $sort);
        return $response;
    }

    /**
     * Operation getStudiesByConditionWithHttpInfo
     *
     * Get a list of all current studies for a given condition.
     *
     * @param string $condition_slug Slug of the condition to return studies for. (required)
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -year)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudiesByConditionWithHttpInfo($condition_slug, $page = null, $count = '10', $sort = '-year')
    {
        // verify the required parameter 'condition_slug' is set
        if ($condition_slug === null) {
            throw new \InvalidArgumentException('Missing the required parameter $condition_slug when calling getStudiesByCondition');
        }
        // parse inputs
        $resourcePath = "/studies/conditions/{conditionSlug}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // path params
        if ($condition_slug !== null) {
            $resourcePath = str_replace(
                "{" . "conditionSlug" . "}",
                $this->apiClient->getSerializer()->toPathValue($condition_slug),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20013',
                '/studies/conditions/{conditionSlug}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStudiesConditions
     *
     * Get a list of all current conditions for studies.
     *
     * @param string $sort How to sort the items. (optional, default to name)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function getStudiesConditions($sort = 'name')
    {
        list($response) = $this->getStudiesConditionsWithHttpInfo($sort);
        return $response;
    }

    /**
     * Operation getStudiesConditionsWithHttpInfo
     *
     * Get a list of all current conditions for studies.
     *
     * @param string $sort How to sort the items. (optional, default to name)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudiesConditionsWithHttpInfo($sort = 'name')
    {
        // parse inputs
        $resourcePath = "/studies/conditions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/studies/conditions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStudyByIdentifier
     *
     * Find study by DOI, PubMed ID, or slug.
     *
     * @param string $identifier_type Type of identifier to for the study to return. (required)
     * @param string $identifier Identifier for the study to return. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Study
     */
    public function getStudyByIdentifier($identifier_type, $identifier)
    {
        list($response) = $this->getStudyByIdentifierWithHttpInfo($identifier_type, $identifier);
        return $response;
    }

    /**
     * Operation getStudyByIdentifierWithHttpInfo
     *
     * Find study by DOI, PubMed ID, or slug.
     *
     * @param string $identifier_type Type of identifier to for the study to return. (required)
     * @param string $identifier Identifier for the study to return. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Study, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudyByIdentifierWithHttpInfo($identifier_type, $identifier)
    {
        // verify the required parameter 'identifier_type' is set
        if ($identifier_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identifier_type when calling getStudyByIdentifier');
        }
        // verify the required parameter 'identifier' is set
        if ($identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identifier when calling getStudyByIdentifier');
        }
        // parse inputs
        $resourcePath = "/studies/{identifierType}/{identifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($identifier_type !== null) {
            $resourcePath = str_replace(
                "{" . "identifierType" . "}",
                $this->apiClient->getSerializer()->toPathValue($identifier_type),
                $resourcePath
            );
        }
        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                "{" . "identifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($identifier),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Study',
                '/studies/{identifierType}/{identifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Study', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Study', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

<?php
/**
 * SeedCompaniesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Otreeba Open Cannabis API
 *
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SeedCompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SeedCompaniesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SeedCompaniesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getSeedCompanies
     *
     * Get a list of all current seed companies.
     *
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -createdAt)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function getSeedCompanies($page = null, $count = null, $sort = null)
    {
        list($response) = $this->getSeedCompaniesWithHttpInfo($page, $count, $sort);
        return $response;
    }

    /**
     * Operation getSeedCompaniesWithHttpInfo
     *
     * Get a list of all current seed companies.
     *
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @param string $sort How to sort the items. (optional, default to -createdAt)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeedCompaniesWithHttpInfo($page = null, $count = null, $sort = null)
    {
        // parse inputs
        $resourcePath = "/seed-companies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/seed-companies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSeedCompanyByOcpc
     *
     * Find seed company by Open Cannabis Product Code (OCPC).
     *
     * @param string $ocpc OCPC of the seed company to return. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SeedCompany
     */
    public function getSeedCompanyByOcpc($ocpc)
    {
        list($response) = $this->getSeedCompanyByOcpcWithHttpInfo($ocpc);
        return $response;
    }

    /**
     * Operation getSeedCompanyByOcpcWithHttpInfo
     *
     * Find seed company by Open Cannabis Product Code (OCPC).
     *
     * @param string $ocpc OCPC of the seed company to return. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SeedCompany, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeedCompanyByOcpcWithHttpInfo($ocpc)
    {
        // verify the required parameter 'ocpc' is set
        if ($ocpc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ocpc when calling getSeedCompanyByOcpc');
        }
        // parse inputs
        $resourcePath = "/seed-companies/{ocpc}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($ocpc !== null) {
            $resourcePath = str_replace(
                "{" . "ocpc" . "}",
                $this->apiClient->getSerializer()->toPathValue($ocpc),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SeedCompany',
                '/seed-companies/{ocpc}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SeedCompany', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SeedCompany', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSeedCompanyStrainsByOcpc
     *
     * Find strains for a seed company by Open Cannabis Product Code (OCPC).
     *
     * @param string $ocpc OCPC of the seed company to return strains for. (required)
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getSeedCompanyStrainsByOcpc($ocpc, $page = null, $count = null)
    {
        list($response) = $this->getSeedCompanyStrainsByOcpcWithHttpInfo($ocpc, $page, $count);
        return $response;
    }

    /**
     * Operation getSeedCompanyStrainsByOcpcWithHttpInfo
     *
     * Find strains for a seed company by Open Cannabis Product Code (OCPC).
     *
     * @param string $ocpc OCPC of the seed company to return strains for. (required)
     * @param int $page Page to be returned. (optional)
     * @param int $count The number of items to return. Default 10. Max 50. (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeedCompanyStrainsByOcpcWithHttpInfo($ocpc, $page = null, $count = null)
    {
        // verify the required parameter 'ocpc' is set
        if ($ocpc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ocpc when calling getSeedCompanyStrainsByOcpc');
        }
        // parse inputs
        $resourcePath = "/seed-companies/{ocpc}/strains";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($ocpc !== null) {
            $resourcePath = str_replace(
                "{" . "ocpc" . "}",
                $this->apiClient->getSerializer()->toPathValue($ocpc),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/seed-companies/{ocpc}/strains'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

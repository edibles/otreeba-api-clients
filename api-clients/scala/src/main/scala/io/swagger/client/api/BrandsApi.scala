/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Brand
import io.swagger.client.model.InlineResponse2005
import io.swagger.client.model.InlineResponse2006
import io.swagger.client.model.InlineResponse2007
import io.swagger.client.model.InlineResponse2008
import io.swagger.client.model.InlineResponse2009
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class BrandsApi(val defBasePath: String = "https://api.otreeba.com/v1",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Find brand by Open Cannabis Product Code (OCPC).
   * Returns a single brand.
   * @param ocpc OCPC of the brand to return. 
   * @return Brand
   */
  def getBrandByOcpc(ocpc: String): Option[Brand] = {
    // create path and map variables
    val path = "/brands/{ocpc}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "ocpc" + "\\}",apiInvoker.escape(ocpc))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ocpc == null) throw new Exception("Missing required parameter 'ocpc' when calling BrandsApi->getBrandByOcpc")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[Brand]).asInstanceOf[Brand])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a list of all current edibles for the given brand.
   * Returns a paginated list of edibles.
   * @param ocpc OCPC of the brand to list edibles for. 
   * @param page Page to be returned. (optional)
   * @param count The number of items to return. Default 10. Max 50. (optional, default to 10)
   * @param sort How to sort the items. (optional, default to -createdAt)
   * @return InlineResponse2008
   */
  def getBrandEdibles(ocpc: String, page: Option[Integer] = None, count: Option[Integer] /* = 10*/, sort: Option[String] /* = -createdAt*/): Option[InlineResponse2008] = {
    // create path and map variables
    val path = "/brands/{ocpc}/edibles".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "ocpc" + "\\}",apiInvoker.escape(ocpc))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ocpc == null) throw new Exception("Missing required parameter 'ocpc' when calling BrandsApi->getBrandEdibles")

    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    count.map(paramVal => queryParams += "count" -> paramVal.toString)
    sort.map(paramVal => queryParams += "sort" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2008]).asInstanceOf[InlineResponse2008])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a list of all current extracts for the given brand.
   * Returns a paginated list of extracts.
   * @param ocpc OCPC of the brand to list extracts for. 
   * @param page Page to be returned. (optional)
   * @param count The number of items to return. Default 10. Max 50. (optional, default to 10)
   * @param sort How to sort the items. (optional, default to -createdAt)
   * @return InlineResponse2007
   */
  def getBrandExtracts(ocpc: String, page: Option[Integer] = None, count: Option[Integer] /* = 10*/, sort: Option[String] /* = -createdAt*/): Option[InlineResponse2007] = {
    // create path and map variables
    val path = "/brands/{ocpc}/extracts".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "ocpc" + "\\}",apiInvoker.escape(ocpc))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ocpc == null) throw new Exception("Missing required parameter 'ocpc' when calling BrandsApi->getBrandExtracts")

    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    count.map(paramVal => queryParams += "count" -> paramVal.toString)
    sort.map(paramVal => queryParams += "sort" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2007]).asInstanceOf[InlineResponse2007])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a list of all current flowers for the given brand.
   * Returns a paginated list of flowers.
   * @param ocpc OCPC of the brand to list flowers for. 
   * @param page Page to be returned. (optional)
   * @param count The number of items to return. Default 10. Max 50. (optional, default to 10)
   * @param sort How to sort the items. (optional, default to -createdAt)
   * @return InlineResponse2006
   */
  def getBrandFlowers(ocpc: String, page: Option[Integer] = None, count: Option[Integer] /* = 10*/, sort: Option[String] /* = -createdAt*/): Option[InlineResponse2006] = {
    // create path and map variables
    val path = "/brands/{ocpc}/flowers".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "ocpc" + "\\}",apiInvoker.escape(ocpc))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ocpc == null) throw new Exception("Missing required parameter 'ocpc' when calling BrandsApi->getBrandFlowers")

    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    count.map(paramVal => queryParams += "count" -> paramVal.toString)
    sort.map(paramVal => queryParams += "sort" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2006]).asInstanceOf[InlineResponse2006])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a list of all current products for the given brand.
   * Returns a paginated list of products.
   * @param ocpc OCPC of the brand to list products for. 
   * @param page Page to be returned. (optional)
   * @param count The number of items to return. Default 10. Max 50. (optional, default to 10)
   * @param sort How to sort the items. (optional, default to -createdAt)
   * @return InlineResponse2009
   */
  def getBrandProducts(ocpc: String, page: Option[Integer] = None, count: Option[Integer] /* = 10*/, sort: Option[String] /* = -createdAt*/): Option[InlineResponse2009] = {
    // create path and map variables
    val path = "/brands/{ocpc}/products".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "ocpc" + "\\}",apiInvoker.escape(ocpc))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ocpc == null) throw new Exception("Missing required parameter 'ocpc' when calling BrandsApi->getBrandProducts")

    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    count.map(paramVal => queryParams += "count" -> paramVal.toString)
    sort.map(paramVal => queryParams += "sort" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2009]).asInstanceOf[InlineResponse2009])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get a list of all current brands.
   * Returns a paginated list of brands.
   * @param page Page to be returned. (optional)
   * @param count The number of items to return. Default 10. Max 50. (optional, default to 10)
   * @param sort How to sort the items. (optional, default to -createdAt)
   * @return InlineResponse2005
   */
  def getBrands(page: Option[Integer] = None, count: Option[Integer] /* = 10*/, sort: Option[String] /* = -createdAt*/): Option[InlineResponse2005] = {
    // create path and map variables
    val path = "/brands".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    count.map(paramVal => queryParams += "count" -> paramVal.toString)
    sort.map(paramVal => queryParams += "sort" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2005]).asInstanceOf[InlineResponse2005])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}

/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BrandsApi {

    protected basePath = 'https://api.otreeba.com/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Returns a single brand.
     * @summary Find brand by Open Cannabis Product Code (OCPC).
     * @param ocpc OCPC of the brand to return.
     */
    public getBrandByOcpc(ocpc: string, extraHttpRequestParams?: any): Observable<models.Brand> {
        return this.getBrandByOcpcWithHttpInfo(ocpc, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of edibles.
     * @summary Get a list of all current edibles for the given brand.
     * @param ocpc OCPC of the brand to list edibles for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandEdibles(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2008> {
        return this.getBrandEdiblesWithHttpInfo(ocpc, page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of extracts.
     * @summary Get a list of all current extracts for the given brand.
     * @param ocpc OCPC of the brand to list extracts for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandExtracts(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2007> {
        return this.getBrandExtractsWithHttpInfo(ocpc, page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of flowers.
     * @summary Get a list of all current flowers for the given brand.
     * @param ocpc OCPC of the brand to list flowers for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandFlowers(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2006> {
        return this.getBrandFlowersWithHttpInfo(ocpc, page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of products.
     * @summary Get a list of all current products for the given brand.
     * @param ocpc OCPC of the brand to list products for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandProducts(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2009> {
        return this.getBrandProductsWithHttpInfo(ocpc, page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of brands.
     * @summary Get a list of all current brands.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrands(page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2005> {
        return this.getBrandsWithHttpInfo(page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Find brand by Open Cannabis Product Code (OCPC).
     * Returns a single brand.
     * @param ocpc OCPC of the brand to return.
     */
    public getBrandByOcpcWithHttpInfo(ocpc: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands/${ocpc}'
                    .replace('${' + 'ocpc' + '}', String(ocpc));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandByOcpc.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current edibles for the given brand.
     * Returns a paginated list of edibles.
     * @param ocpc OCPC of the brand to list edibles for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandEdiblesWithHttpInfo(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands/${ocpc}/edibles'
                    .replace('${' + 'ocpc' + '}', String(ocpc));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandEdibles.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current extracts for the given brand.
     * Returns a paginated list of extracts.
     * @param ocpc OCPC of the brand to list extracts for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandExtractsWithHttpInfo(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands/${ocpc}/extracts'
                    .replace('${' + 'ocpc' + '}', String(ocpc));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandExtracts.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current flowers for the given brand.
     * Returns a paginated list of flowers.
     * @param ocpc OCPC of the brand to list flowers for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandFlowersWithHttpInfo(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands/${ocpc}/flowers'
                    .replace('${' + 'ocpc' + '}', String(ocpc));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandFlowers.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current products for the given brand.
     * Returns a paginated list of products.
     * @param ocpc OCPC of the brand to list products for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandProductsWithHttpInfo(ocpc: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands/${ocpc}/products'
                    .replace('${' + 'ocpc' + '}', String(ocpc));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ocpc' is not null or undefined
        if (ocpc === null || ocpc === undefined) {
            throw new Error('Required parameter ocpc was null or undefined when calling getBrandProducts.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current brands.
     * Returns a paginated list of brands.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getBrandsWithHttpInfo(page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/brands';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}

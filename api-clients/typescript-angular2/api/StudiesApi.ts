/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StudiesApi {

    protected basePath = 'https://api.otreeba.com/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Returns a paginated list of studies.
     * @summary Get a list of all current studies.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getStudies(page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse20012> {
        return this.getStudiesWithHttpInfo(page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a paginated list of studies.
     * @summary Get a list of all current studies for a given condition.
     * @param conditionSlug Slug of the condition to return studies for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getStudiesByCondition(conditionSlug: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse20013> {
        return this.getStudiesByConditionWithHttpInfo(conditionSlug, page, count, sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a list of all current conditions for studies.
     * @summary Get a list of all current conditions for studies.
     * @param sort How to sort the items.
     */
    public getStudiesConditions(sort?: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getStudiesConditionsWithHttpInfo(sort, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a single study.
     * @summary Find study by DOI, PubMed ID, or slug.
     * @param identifierType Type of identifier to for the study to return.
     * @param identifier Identifier for the study to return.
     */
    public getStudyByIdentifier(identifierType: string, identifier: string, extraHttpRequestParams?: any): Observable<models.Study> {
        return this.getStudyByIdentifierWithHttpInfo(identifierType, identifier, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Get a list of all current studies.
     * Returns a paginated list of studies.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getStudiesWithHttpInfo(page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/studies';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current studies for a given condition.
     * Returns a paginated list of studies.
     * @param conditionSlug Slug of the condition to return studies for.
     * @param page Page to be returned.
     * @param count The number of items to return. Default 10. Max 50.
     * @param sort How to sort the items.
     */
    public getStudiesByConditionWithHttpInfo(conditionSlug: string, page?: number, count?: number, sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/studies/conditions/${conditionSlug}'
                    .replace('${' + 'conditionSlug' + '}', String(conditionSlug));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'conditionSlug' is not null or undefined
        if (conditionSlug === null || conditionSlug === undefined) {
            throw new Error('Required parameter conditionSlug was null or undefined when calling getStudiesByCondition.');
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of all current conditions for studies.
     * Returns a list of all current conditions for studies.
     * @param sort How to sort the items.
     */
    public getStudiesConditionsWithHttpInfo(sort?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/studies/conditions';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find study by DOI, PubMed ID, or slug.
     * Returns a single study.
     * @param identifierType Type of identifier to for the study to return.
     * @param identifier Identifier for the study to return.
     */
    public getStudyByIdentifierWithHttpInfo(identifierType: string, identifier: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/studies/${identifierType}/${identifier}'
                    .replace('${' + 'identifierType' + '}', String(identifierType))
                    .replace('${' + 'identifier' + '}', String(identifier));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'identifierType' is not null or undefined
        if (identifierType === null || identifierType === undefined) {
            throw new Error('Required parameter identifierType was null or undefined when calling getStudyByIdentifier.');
        }
        // verify required parameter 'identifier' is not null or undefined
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling getStudyByIdentifier.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('X-API-Key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}

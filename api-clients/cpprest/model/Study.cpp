/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Study.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Study::Study()
{
    m_Name = U("");
    m_Year = 0;
    m_YearIsSet = false;
    m_Doi = U("");
    m_DoiIsSet = false;
    m_PubMedId = U("");
    m_PubMedIdIsSet = false;
    m_Slug = U("");
    m_SlugIsSet = false;
    m_KeyFindings = U("");
    m_KeyFindingsIsSet = false;
    m_ConditionsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

Study::~Study()
{
}

void Study::validate()
{
    // TODO: implement validation
}

web::json::value Study::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_YearIsSet)
    {
        val[U("year")] = ModelBase::toJson(m_Year);
    }
    if(m_DoiIsSet)
    {
        val[U("doi")] = ModelBase::toJson(m_Doi);
    }
    if(m_PubMedIdIsSet)
    {
        val[U("pubMedId")] = ModelBase::toJson(m_PubMedId);
    }
    if(m_SlugIsSet)
    {
        val[U("slug")] = ModelBase::toJson(m_Slug);
    }
    if(m_KeyFindingsIsSet)
    {
        val[U("keyFindings")] = ModelBase::toJson(m_KeyFindings);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Conditions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("conditions")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CreatedAtIsSet)
    {
        val[U("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[U("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

void Study::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("year")))
    {
        setYear(ModelBase::int32_tFromJson(val[U("year")]));
    }
    if(val.has_field(U("doi")))
    {
        setDoi(ModelBase::stringFromJson(val[U("doi")]));
    }
    if(val.has_field(U("pubMedId")))
    {
        setPubMedId(ModelBase::stringFromJson(val[U("pubMedId")]));
    }
    if(val.has_field(U("slug")))
    {
        setSlug(ModelBase::stringFromJson(val[U("slug")]));
    }
    if(val.has_field(U("keyFindings")))
    {
        setKeyFindings(ModelBase::stringFromJson(val[U("keyFindings")]));
    }
    {
        m_Conditions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("conditions")))
        {
        for( auto& item : val[U("conditions")].as_array() )
        {
            if(item.is_null())
            {
                m_Conditions.push_back( std::shared_ptr<Condition>(nullptr) );
            }
            else
            {
                std::shared_ptr<Condition> newItem(new Condition());
                newItem->fromJson(item);
                m_Conditions.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("createdAt")))
    {
        setCreatedAt(ModelBase::dateFromJson(val[U("createdAt")]));
    }
    if(val.has_field(U("updatedAt")))
    {
        setUpdatedAt(ModelBase::dateFromJson(val[U("updatedAt")]));
    }
}

void Study::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_YearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("year"), m_Year));
    }
    if(m_DoiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("doi"), m_Doi));
        
    }
    if(m_PubMedIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pubMedId"), m_PubMedId));
        
    }
    if(m_SlugIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("slug"), m_Slug));
        
    }
    if(m_KeyFindingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("keyFindings"), m_KeyFindings));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Conditions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("conditions"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("createdAt"), m_CreatedAt));
        
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updatedAt"), m_UpdatedAt));
        
    }
}

void Study::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("year")))
    {
        setYear(ModelBase::int32_tFromHttpContent(multipart->getContent(U("year"))));
    }
    if(multipart->hasContent(U("doi")))
    {
        setDoi(ModelBase::stringFromHttpContent(multipart->getContent(U("doi"))));
    }
    if(multipart->hasContent(U("pubMedId")))
    {
        setPubMedId(ModelBase::stringFromHttpContent(multipart->getContent(U("pubMedId"))));
    }
    if(multipart->hasContent(U("slug")))
    {
        setSlug(ModelBase::stringFromHttpContent(multipart->getContent(U("slug"))));
    }
    if(multipart->hasContent(U("keyFindings")))
    {
        setKeyFindings(ModelBase::stringFromHttpContent(multipart->getContent(U("keyFindings"))));
    }
    {
        m_Conditions.clear();
        if(multipart->hasContent(U("conditions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("conditions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Conditions.push_back( std::shared_ptr<Condition>(nullptr) );
            }
            else
            {
                std::shared_ptr<Condition> newItem(new Condition());
                newItem->fromJson(item);
                m_Conditions.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("createdAt")))
    {
        setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(U("createdAt"))));
    }
    if(multipart->hasContent(U("updatedAt")))
    {
        setUpdatedAt(ModelBase::dateFromHttpContent(multipart->getContent(U("updatedAt"))));
    }
}

utility::string_t Study::getName() const
{
    return m_Name;
}


void Study::setName(utility::string_t value)
{
    m_Name = value;
    
}
int32_t Study::getYear() const
{
    return m_Year;
}


void Study::setYear(int32_t value)
{
    m_Year = value;
    m_YearIsSet = true;
}
bool Study::yearIsSet() const
{
    return m_YearIsSet;
}

void Study::unsetYear()
{
    m_YearIsSet = false;
}

utility::string_t Study::getDoi() const
{
    return m_Doi;
}


void Study::setDoi(utility::string_t value)
{
    m_Doi = value;
    m_DoiIsSet = true;
}
bool Study::doiIsSet() const
{
    return m_DoiIsSet;
}

void Study::unsetDoi()
{
    m_DoiIsSet = false;
}

utility::string_t Study::getPubMedId() const
{
    return m_PubMedId;
}


void Study::setPubMedId(utility::string_t value)
{
    m_PubMedId = value;
    m_PubMedIdIsSet = true;
}
bool Study::pubMedIdIsSet() const
{
    return m_PubMedIdIsSet;
}

void Study::unsetPubMedId()
{
    m_PubMedIdIsSet = false;
}

utility::string_t Study::getSlug() const
{
    return m_Slug;
}


void Study::setSlug(utility::string_t value)
{
    m_Slug = value;
    m_SlugIsSet = true;
}
bool Study::slugIsSet() const
{
    return m_SlugIsSet;
}

void Study::unsetSlug()
{
    m_SlugIsSet = false;
}

utility::string_t Study::getKeyFindings() const
{
    return m_KeyFindings;
}


void Study::setKeyFindings(utility::string_t value)
{
    m_KeyFindings = value;
    m_KeyFindingsIsSet = true;
}
bool Study::keyFindingsIsSet() const
{
    return m_KeyFindingsIsSet;
}

void Study::unsetKeyFindings()
{
    m_KeyFindingsIsSet = false;
}

std::vector<std::shared_ptr<Condition>>& Study::getConditions()
{
    return m_Conditions;
}

void Study::setConditions(std::vector<std::shared_ptr<Condition>> value)
{
    m_Conditions = value;
    m_ConditionsIsSet = true;
}
bool Study::conditionsIsSet() const
{
    return m_ConditionsIsSet;
}

void Study::unsetConditions()
{
    m_ConditionsIsSet = false;
}

utility::datetime Study::getCreatedAt() const
{
    return m_CreatedAt;
}


void Study::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool Study::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Study::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}

utility::datetime Study::getUpdatedAt() const
{
    return m_UpdatedAt;
}


void Study::setUpdatedAt(utility::datetime value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool Study::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Study::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}

}
}
}
}


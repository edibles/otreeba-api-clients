/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Extract.h
 *
 * 
 */

#ifndef Extract_H_
#define Extract_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Extract
    : public ModelBase
{
public:
    Extract();
    virtual ~Extract();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Extract members

    /// <summary>
    /// Name of the extract.
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// Open Cannabis Product Code for the extract.
    /// </summary>
    utility::string_t getOcpc() const;
    bool ocpcIsSet() const;
    void unsetOcpc();
    void setOcpc(utility::string_t value);
    /// <summary>
    /// Name and Open Cannabis Product Code of the brand that created these extract.
    /// </summary>
    std::shared_ptr<Object> getBrand() const;
    bool brandIsSet() const;
    void unsetBrand();
    void setBrand(std::shared_ptr<Object> value);
    /// <summary>
    /// Type of extract.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(utility::string_t value);
    /// <summary>
    /// Name and Open Cannabis Product Code of the strain for these extract.
    /// </summary>
    std::shared_ptr<Object> getStrain() const;
    bool strainIsSet() const;
    void unsetStrain();
    void setStrain(std::shared_ptr<Object> value);
    /// <summary>
    /// Description of the extract.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// URL for QR that leads to page on Cannabis Reports.
    /// </summary>
    utility::string_t getQr() const;
    bool qrIsSet() const;
    void unsetQr();
    void setQr(utility::string_t value);
    /// <summary>
    /// URL for the extract on Cannabis Reports.
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();
    void setUrl(utility::string_t value);
    /// <summary>
    /// URL for the main photo of the extract.
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();
    void setImage(utility::string_t value);
    /// <summary>
    /// URL for the PDF containing lab testing information for these extract.
    /// </summary>
    utility::string_t getLabTest() const;
    bool labTestIsSet() const;
    void unsetLabTest();
    void setLabTest(utility::string_t value);
    /// <summary>
    /// THC measurement for these extract.
    /// </summary>
    utility::string_t getThc() const;
    bool thcIsSet() const;
    void unsetThc();
    void setThc(utility::string_t value);
    /// <summary>
    /// CBD measurement for these extract.
    /// </summary>
    utility::string_t getCbd() const;
    bool cbdIsSet() const;
    void unsetCbd();
    void setCbd(utility::string_t value);
    /// <summary>
    /// Date and time record was created, UTC.
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    void setCreatedAt(utility::datetime value);
    /// <summary>
    /// Date and time record was updated, UTC.
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    void setUpdatedAt(utility::datetime value);

protected:
    utility::string_t m_Name;
        utility::string_t m_Ocpc;
    bool m_OcpcIsSet;
    std::shared_ptr<Object> m_Brand;
    bool m_BrandIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<Object> m_Strain;
    bool m_StrainIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Qr;
    bool m_QrIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    utility::string_t m_LabTest;
    bool m_LabTestIsSet;
    utility::string_t m_Thc;
    bool m_ThcIsSet;
    utility::string_t m_Cbd;
    bool m_CbdIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};

}
}
}
}

#endif /* Extract_H_ */

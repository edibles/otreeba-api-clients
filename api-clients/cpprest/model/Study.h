/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Study.h
 *
 * 
 */

#ifndef Study_H_
#define Study_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Condition.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Study
    : public ModelBase
{
public:
    Study();
    virtual ~Study();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Study members

    /// <summary>
    /// Name of the study.
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// Year of the study.
    /// </summary>
    int32_t getYear() const;
    bool yearIsSet() const;
    void unsetYear();
    void setYear(int32_t value);
    /// <summary>
    /// Digital Object Identifier for the study.
    /// </summary>
    utility::string_t getDoi() const;
    bool doiIsSet() const;
    void unsetDoi();
    void setDoi(utility::string_t value);
    /// <summary>
    /// PubMed ID for the study.
    /// </summary>
    utility::string_t getPubMedId() const;
    bool pubMedIdIsSet() const;
    void unsetPubMedId();
    void setPubMedId(utility::string_t value);
    /// <summary>
    /// Slug based on the study name.
    /// </summary>
    utility::string_t getSlug() const;
    bool slugIsSet() const;
    void unsetSlug();
    void setSlug(utility::string_t value);
    /// <summary>
    /// Key findings for the study.
    /// </summary>
    utility::string_t getKeyFindings() const;
    bool keyFindingsIsSet() const;
    void unsetKeyFindings();
    void setKeyFindings(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Condition>>& getConditions();
    bool conditionsIsSet() const;
    void unsetConditions();
    void setConditions(std::vector<std::shared_ptr<Condition>> value);
    /// <summary>
    /// Date and time record was created, UTC.
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    void setCreatedAt(utility::datetime value);
    /// <summary>
    /// Date and time record was updated, UTC.
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    void setUpdatedAt(utility::datetime value);

protected:
    utility::string_t m_Name;
        int32_t m_Year;
    bool m_YearIsSet;
    utility::string_t m_Doi;
    bool m_DoiIsSet;
    utility::string_t m_PubMedId;
    bool m_PubMedIdIsSet;
    utility::string_t m_Slug;
    bool m_SlugIsSet;
    utility::string_t m_KeyFindings;
    bool m_KeyFindingsIsSet;
    std::vector<std::shared_ptr<Condition>> m_Conditions;
    bool m_ConditionsIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};

}
}
}
}

#endif /* Study_H_ */

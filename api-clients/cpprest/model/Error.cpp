/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Error.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Error::Error()
{
    m_Code = 0;
    m_Message = U("");
}

Error::~Error()
{
}

void Error::validate()
{
    // TODO: implement validation
}

web::json::value Error::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("code")] = ModelBase::toJson(m_Code);
    val[U("message")] = ModelBase::toJson(m_Message);

    return val;
}

void Error::fromJson(web::json::value& val)
{
    setCode(ModelBase::int32_tFromJson(val[U("code")]));
    setMessage(ModelBase::stringFromJson(val[U("message")]));
}

void Error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("message"), m_Message));
}

void Error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("code"))));
    setMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("message"))));
}

int32_t Error::getCode() const
{
    return m_Code;
}


void Error::setCode(int32_t value)
{
    m_Code = value;
    
}
utility::string_t Error::getMessage() const
{
    return m_Message;
}


void Error::setMessage(utility::string_t value)
{
    m_Message = value;
    
}
}
}
}
}


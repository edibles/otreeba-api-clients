/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Brand.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Brand::Brand()
{
    m_Name = U("");
    m_Ocpc = U("");
    m_OcpcIsSet = false;
    m_Link = U("");
    m_LinkIsSet = false;
    m_Qr = U("");
    m_QrIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    m_Image = U("");
    m_ImageIsSet = false;
    m_FlowersIsSet = false;
    m_ExtractsIsSet = false;
    m_EdiblesIsSet = false;
    m_ProductsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

Brand::~Brand()
{
}

void Brand::validate()
{
    // TODO: implement validation
}

web::json::value Brand::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_OcpcIsSet)
    {
        val[U("ocpc")] = ModelBase::toJson(m_Ocpc);
    }
    if(m_LinkIsSet)
    {
        val[U("link")] = ModelBase::toJson(m_Link);
    }
    if(m_QrIsSet)
    {
        val[U("qr")] = ModelBase::toJson(m_Qr);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    if(m_ImageIsSet)
    {
        val[U("image")] = ModelBase::toJson(m_Image);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Flowers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("flowers")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Extracts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("extracts")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Edibles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("edibles")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Products )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("products")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CreatedAtIsSet)
    {
        val[U("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[U("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

void Brand::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("ocpc")))
    {
        setOcpc(ModelBase::stringFromJson(val[U("ocpc")]));
    }
    if(val.has_field(U("link")))
    {
        setLink(ModelBase::stringFromJson(val[U("link")]));
    }
    if(val.has_field(U("qr")))
    {
        setQr(ModelBase::stringFromJson(val[U("qr")]));
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
    }
    if(val.has_field(U("image")))
    {
        setImage(ModelBase::stringFromJson(val[U("image")]));
    }
    {
        m_Flowers.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("flowers")))
        {
        for( auto& item : val[U("flowers")].as_array() )
        {
            m_Flowers.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Extracts.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("extracts")))
        {
        for( auto& item : val[U("extracts")].as_array() )
        {
            m_Extracts.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Edibles.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("edibles")))
        {
        for( auto& item : val[U("edibles")].as_array() )
        {
            m_Edibles.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Products.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("products")))
        {
        for( auto& item : val[U("products")].as_array() )
        {
            m_Products.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("createdAt")))
    {
        setCreatedAt(ModelBase::dateFromJson(val[U("createdAt")]));
    }
    if(val.has_field(U("updatedAt")))
    {
        setUpdatedAt(ModelBase::dateFromJson(val[U("updatedAt")]));
    }
}

void Brand::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_OcpcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ocpc"), m_Ocpc));
        
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("link"), m_Link));
        
    }
    if(m_QrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("qr"), m_Qr));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("image"), m_Image));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Flowers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("flowers"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Extracts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("extracts"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Edibles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("edibles"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Products )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("products"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("createdAt"), m_CreatedAt));
        
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updatedAt"), m_UpdatedAt));
        
    }
}

void Brand::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("ocpc")))
    {
        setOcpc(ModelBase::stringFromHttpContent(multipart->getContent(U("ocpc"))));
    }
    if(multipart->hasContent(U("link")))
    {
        setLink(ModelBase::stringFromHttpContent(multipart->getContent(U("link"))));
    }
    if(multipart->hasContent(U("qr")))
    {
        setQr(ModelBase::stringFromHttpContent(multipart->getContent(U("qr"))));
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
    }
    if(multipart->hasContent(U("image")))
    {
        setImage(ModelBase::stringFromHttpContent(multipart->getContent(U("image"))));
    }
    {
        m_Flowers.clear();
        if(multipart->hasContent(U("flowers")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("flowers"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Flowers.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Extracts.clear();
        if(multipart->hasContent(U("extracts")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("extracts"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Extracts.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Edibles.clear();
        if(multipart->hasContent(U("edibles")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("edibles"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Edibles.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Products.clear();
        if(multipart->hasContent(U("products")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("products"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Products.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("createdAt")))
    {
        setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(U("createdAt"))));
    }
    if(multipart->hasContent(U("updatedAt")))
    {
        setUpdatedAt(ModelBase::dateFromHttpContent(multipart->getContent(U("updatedAt"))));
    }
}

utility::string_t Brand::getName() const
{
    return m_Name;
}


void Brand::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Brand::getOcpc() const
{
    return m_Ocpc;
}


void Brand::setOcpc(utility::string_t value)
{
    m_Ocpc = value;
    m_OcpcIsSet = true;
}
bool Brand::ocpcIsSet() const
{
    return m_OcpcIsSet;
}

void Brand::unsetOcpc()
{
    m_OcpcIsSet = false;
}

utility::string_t Brand::getLink() const
{
    return m_Link;
}


void Brand::setLink(utility::string_t value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool Brand::linkIsSet() const
{
    return m_LinkIsSet;
}

void Brand::unsetLink()
{
    m_LinkIsSet = false;
}

utility::string_t Brand::getQr() const
{
    return m_Qr;
}


void Brand::setQr(utility::string_t value)
{
    m_Qr = value;
    m_QrIsSet = true;
}
bool Brand::qrIsSet() const
{
    return m_QrIsSet;
}

void Brand::unsetQr()
{
    m_QrIsSet = false;
}

utility::string_t Brand::getUrl() const
{
    return m_Url;
}


void Brand::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool Brand::urlIsSet() const
{
    return m_UrlIsSet;
}

void Brand::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t Brand::getImage() const
{
    return m_Image;
}


void Brand::setImage(utility::string_t value)
{
    m_Image = value;
    m_ImageIsSet = true;
}
bool Brand::imageIsSet() const
{
    return m_ImageIsSet;
}

void Brand::unsetImage()
{
    m_ImageIsSet = false;
}

std::vector<utility::string_t>& Brand::getFlowers()
{
    return m_Flowers;
}

void Brand::setFlowers(std::vector<utility::string_t> value)
{
    m_Flowers = value;
    m_FlowersIsSet = true;
}
bool Brand::flowersIsSet() const
{
    return m_FlowersIsSet;
}

void Brand::unsetFlowers()
{
    m_FlowersIsSet = false;
}

std::vector<utility::string_t>& Brand::getExtracts()
{
    return m_Extracts;
}

void Brand::setExtracts(std::vector<utility::string_t> value)
{
    m_Extracts = value;
    m_ExtractsIsSet = true;
}
bool Brand::extractsIsSet() const
{
    return m_ExtractsIsSet;
}

void Brand::unsetExtracts()
{
    m_ExtractsIsSet = false;
}

std::vector<utility::string_t>& Brand::getEdibles()
{
    return m_Edibles;
}

void Brand::setEdibles(std::vector<utility::string_t> value)
{
    m_Edibles = value;
    m_EdiblesIsSet = true;
}
bool Brand::ediblesIsSet() const
{
    return m_EdiblesIsSet;
}

void Brand::unsetEdibles()
{
    m_EdiblesIsSet = false;
}

std::vector<utility::string_t>& Brand::getProducts()
{
    return m_Products;
}

void Brand::setProducts(std::vector<utility::string_t> value)
{
    m_Products = value;
    m_ProductsIsSet = true;
}
bool Brand::productsIsSet() const
{
    return m_ProductsIsSet;
}

void Brand::unsetProducts()
{
    m_ProductsIsSet = false;
}

utility::datetime Brand::getCreatedAt() const
{
    return m_CreatedAt;
}


void Brand::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool Brand::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Brand::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}

utility::datetime Brand::getUpdatedAt() const
{
    return m_UpdatedAt;
}


void Brand::setUpdatedAt(utility::datetime value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool Brand::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Brand::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}

}
}
}
}


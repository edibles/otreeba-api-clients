/**
 * Otreeba Open Cannabis API
 * This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@otreeba.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Pagination.h
 *
 * 
 */

#ifndef Pagination_H_
#define Pagination_H_


#include "ModelBase.h"

#include "Object.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Pagination
    : public ModelBase
{
public:
    Pagination();
    virtual ~Pagination();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Pagination members

    /// <summary>
    /// Total number of results available.
    /// </summary>
    int32_t getTotal() const;
    bool totalIsSet() const;
    void unsetTotal();
    void setTotal(int32_t value);
    /// <summary>
    /// Number of results to return. Default 10. Max 50.
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();
    void setCount(int32_t value);
    /// <summary>
    /// Number of results per page.
    /// </summary>
    int32_t getPerPage() const;
    bool perPageIsSet() const;
    void unsetPer_page();
    void setPerPage(int32_t value);
    /// <summary>
    /// Page of results.
    /// </summary>
    int32_t getCurrentPage() const;
    bool currentPageIsSet() const;
    void unsetCurrent_page();
    void setCurrentPage(int32_t value);
    /// <summary>
    /// Total number of pages of results.
    /// </summary>
    int32_t getTotalPages() const;
    bool totalPagesIsSet() const;
    void unsetTotal_pages();
    void setTotalPages(int32_t value);
    /// <summary>
    /// Links to the previous and/or next pages of results.
    /// </summary>
    std::shared_ptr<Object> getLinks() const;
    bool linksIsSet() const;
    void unsetLinks();
    void setLinks(std::shared_ptr<Object> value);

protected:
    int32_t m_Total;
    bool m_TotalIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    int32_t m_Per_page;
    bool m_Per_pageIsSet;
    int32_t m_Current_page;
    bool m_Current_pageIsSet;
    int32_t m_Total_pages;
    bool m_Total_pagesIsSet;
    std::shared_ptr<Object> m_Links;
    bool m_LinksIsSet;
};

}
}
}
}

#endif /* Pagination_H_ */

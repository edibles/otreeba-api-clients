//
// Strain.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Strain: JSONEncodable {

    /** Name of the strain. */
    public var name: String?
    /** Open Cannabis Product Code for the strain. */
    public var ocpc: String?
    /** Name and Open Cannabis Product Code of the seed company that created the strain. */
    public var seedCompany: Any?
    /** URL for QR that leads to page on Cannabis Reports. */
    public var qr: String?
    /** URL for strain on Cannabis Reports. */
    public var url: String?
    /** URL for the main photo of the strain. */
    public var image: String?
    /** Object of countries that this strain has lineages from. {&#39;Country Name&#39; &#x3D;&gt; &#39;ISO 3166-1 Two Letter Country Code&#39;} */
    public var lineage: Any?
    /** Names of the parents of the strains and their associated Open Cannabis Product Codes. */
    public var genetics: Any?
    /** Open Cannabis Product Codes of the children of this strain. */
    public var children: [String]?
    /** Date and time record was created, UTC. */
    public var createdAt: Date?
    /** Date and time record was updated, UTC. */
    public var updatedAt: Date?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["name"] = self.name
        nillableDictionary["ocpc"] = self.ocpc
        nillableDictionary["seedCompany"] = self.seedCompany
        nillableDictionary["qr"] = self.qr
        nillableDictionary["url"] = self.url
        nillableDictionary["image"] = self.image
        nillableDictionary["lineage"] = self.lineage
        nillableDictionary["genetics"] = self.genetics
        nillableDictionary["children"] = self.children?.encodeToJSON()
        nillableDictionary["createdAt"] = self.createdAt?.encodeToJSON()
        nillableDictionary["updatedAt"] = self.updatedAt?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}

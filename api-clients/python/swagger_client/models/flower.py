# coding: utf-8

"""
    Otreeba Open Cannabis API

    This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).

    OpenAPI spec version: 1.0.0
    Contact: api@otreeba.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Flower(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ocpc': 'str',
        'brand': 'object',
        'type': 'str',
        'strain': 'object',
        'description': 'str',
        'qr': 'str',
        'url': 'str',
        'image': 'str',
        'lab_test': 'str',
        'thc': 'str',
        'cbd': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'ocpc': 'ocpc',
        'brand': 'brand',
        'type': 'type',
        'strain': 'strain',
        'description': 'description',
        'qr': 'qr',
        'url': 'url',
        'image': 'image',
        'lab_test': 'labTest',
        'thc': 'thc',
        'cbd': 'cbd',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, name=None, ocpc=None, brand=None, type=None, strain=None, description=None, qr=None, url=None, image=None, lab_test=None, thc=None, cbd=None, created_at=None, updated_at=None):
        """
        Flower - a model defined in Swagger
        """

        self._name = None
        self._ocpc = None
        self._brand = None
        self._type = None
        self._strain = None
        self._description = None
        self._qr = None
        self._url = None
        self._image = None
        self._lab_test = None
        self._thc = None
        self._cbd = None
        self._created_at = None
        self._updated_at = None

        self.name = name
        if ocpc is not None:
          self.ocpc = ocpc
        if brand is not None:
          self.brand = brand
        if type is not None:
          self.type = type
        if strain is not None:
          self.strain = strain
        if description is not None:
          self.description = description
        if qr is not None:
          self.qr = qr
        if url is not None:
          self.url = url
        if image is not None:
          self.image = image
        if lab_test is not None:
          self.lab_test = lab_test
        if thc is not None:
          self.thc = thc
        if cbd is not None:
          self.cbd = cbd
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def name(self):
        """
        Gets the name of this Flower.
        Name of the flowers.

        :return: The name of this Flower.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Flower.
        Name of the flowers.

        :param name: The name of this Flower.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ocpc(self):
        """
        Gets the ocpc of this Flower.
        Open Cannabis Product Code for the flowers.

        :return: The ocpc of this Flower.
        :rtype: str
        """
        return self._ocpc

    @ocpc.setter
    def ocpc(self, ocpc):
        """
        Sets the ocpc of this Flower.
        Open Cannabis Product Code for the flowers.

        :param ocpc: The ocpc of this Flower.
        :type: str
        """

        self._ocpc = ocpc

    @property
    def brand(self):
        """
        Gets the brand of this Flower.
        Name and Open Cannabis Product Code of the brand that created these flowers.

        :return: The brand of this Flower.
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this Flower.
        Name and Open Cannabis Product Code of the brand that created these flowers.

        :param brand: The brand of this Flower.
        :type: object
        """

        self._brand = brand

    @property
    def type(self):
        """
        Gets the type of this Flower.
        Type of flowers.

        :return: The type of this Flower.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Flower.
        Type of flowers.

        :param type: The type of this Flower.
        :type: str
        """

        self._type = type

    @property
    def strain(self):
        """
        Gets the strain of this Flower.
        Name and Open Cannabis Product Code of the strain for these flowers.

        :return: The strain of this Flower.
        :rtype: object
        """
        return self._strain

    @strain.setter
    def strain(self, strain):
        """
        Sets the strain of this Flower.
        Name and Open Cannabis Product Code of the strain for these flowers.

        :param strain: The strain of this Flower.
        :type: object
        """

        self._strain = strain

    @property
    def description(self):
        """
        Gets the description of this Flower.
        Description of the flowers.

        :return: The description of this Flower.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Flower.
        Description of the flowers.

        :param description: The description of this Flower.
        :type: str
        """

        self._description = description

    @property
    def qr(self):
        """
        Gets the qr of this Flower.
        URL for QR that leads to page on Cannabis Reports.

        :return: The qr of this Flower.
        :rtype: str
        """
        return self._qr

    @qr.setter
    def qr(self, qr):
        """
        Sets the qr of this Flower.
        URL for QR that leads to page on Cannabis Reports.

        :param qr: The qr of this Flower.
        :type: str
        """

        self._qr = qr

    @property
    def url(self):
        """
        Gets the url of this Flower.
        URL for the flowers on Cannabis Reports.

        :return: The url of this Flower.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Flower.
        URL for the flowers on Cannabis Reports.

        :param url: The url of this Flower.
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """
        Gets the image of this Flower.
        URL for the main photo of the flowers.

        :return: The image of this Flower.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Flower.
        URL for the main photo of the flowers.

        :param image: The image of this Flower.
        :type: str
        """

        self._image = image

    @property
    def lab_test(self):
        """
        Gets the lab_test of this Flower.
        URL for the PDF containing lab testing information for these flowers.

        :return: The lab_test of this Flower.
        :rtype: str
        """
        return self._lab_test

    @lab_test.setter
    def lab_test(self, lab_test):
        """
        Sets the lab_test of this Flower.
        URL for the PDF containing lab testing information for these flowers.

        :param lab_test: The lab_test of this Flower.
        :type: str
        """

        self._lab_test = lab_test

    @property
    def thc(self):
        """
        Gets the thc of this Flower.
        THC measurement for these flowers.

        :return: The thc of this Flower.
        :rtype: str
        """
        return self._thc

    @thc.setter
    def thc(self, thc):
        """
        Sets the thc of this Flower.
        THC measurement for these flowers.

        :param thc: The thc of this Flower.
        :type: str
        """

        self._thc = thc

    @property
    def cbd(self):
        """
        Gets the cbd of this Flower.
        CBD measurement for these flowers.

        :return: The cbd of this Flower.
        :rtype: str
        """
        return self._cbd

    @cbd.setter
    def cbd(self, cbd):
        """
        Sets the cbd of this Flower.
        CBD measurement for these flowers.

        :param cbd: The cbd of this Flower.
        :type: str
        """

        self._cbd = cbd

    @property
    def created_at(self):
        """
        Gets the created_at of this Flower.
        Date and time record was created, UTC.

        :return: The created_at of this Flower.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Flower.
        Date and time record was created, UTC.

        :param created_at: The created_at of this Flower.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Flower.
        Date and time record was updated, UTC.

        :return: The updated_at of this Flower.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Flower.
        Date and time record was updated, UTC.

        :param updated_at: The updated_at of this Flower.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Flower):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

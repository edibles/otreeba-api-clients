# coding: utf-8

"""
    Otreeba Open Cannabis API

    This is an open, canonical database of cannabis seed companies, strains, brands, products, retailers, and studies from [Otreeba](https://otreeba.com). It is written on the OpenAPI Specification AKA Swagger. You can find out more about the Open API Initiative at [https://www.openapis.org/](https://www.openapis.org), or more info on Swagger at [http://swagger.io/](http://swagger.io/).

    OpenAPI spec version: 1.0.0
    Contact: api@otreeba.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StudiesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_studies(self, **kwargs):
        """
        Get a list of all current studies.
        Returns a paginated list of studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page to be returned.
        :param int count: The number of items to return. Default 10. Max 50.
        :param str sort: How to sort the items.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_studies_with_http_info(**kwargs)
        else:
            (data) = self.get_studies_with_http_info(**kwargs)
            return data

    def get_studies_with_http_info(self, **kwargs):
        """
        Get a list of all current studies.
        Returns a paginated list of studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page to be returned.
        :param int count: The number of items to return. Default 10. Max 50.
        :param str sort: How to sort the items.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'count', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/studies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_studies_by_condition(self, condition_slug, **kwargs):
        """
        Get a list of all current studies for a given condition.
        Returns a paginated list of studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies_by_condition(condition_slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str condition_slug: Slug of the condition to return studies for. (required)
        :param int page: Page to be returned.
        :param int count: The number of items to return. Default 10. Max 50.
        :param str sort: How to sort the items.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_studies_by_condition_with_http_info(condition_slug, **kwargs)
        else:
            (data) = self.get_studies_by_condition_with_http_info(condition_slug, **kwargs)
            return data

    def get_studies_by_condition_with_http_info(self, condition_slug, **kwargs):
        """
        Get a list of all current studies for a given condition.
        Returns a paginated list of studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies_by_condition_with_http_info(condition_slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str condition_slug: Slug of the condition to return studies for. (required)
        :param int page: Page to be returned.
        :param int count: The number of items to return. Default 10. Max 50.
        :param str sort: How to sort the items.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['condition_slug', 'page', 'count', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies_by_condition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'condition_slug' is set
        if ('condition_slug' not in params) or (params['condition_slug'] is None):
            raise ValueError("Missing the required parameter `condition_slug` when calling `get_studies_by_condition`")


        collection_formats = {}

        resource_path = '/studies/conditions/{conditionSlug}'.replace('{format}', 'json')
        path_params = {}
        if 'condition_slug' in params:
            path_params['conditionSlug'] = params['condition_slug']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_studies_conditions(self, **kwargs):
        """
        Get a list of all current conditions for studies.
        Returns a list of all current conditions for studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies_conditions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: How to sort the items.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_studies_conditions_with_http_info(**kwargs)
        else:
            (data) = self.get_studies_conditions_with_http_info(**kwargs)
            return data

    def get_studies_conditions_with_http_info(self, **kwargs):
        """
        Get a list of all current conditions for studies.
        Returns a list of all current conditions for studies.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies_conditions_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: How to sort the items.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies_conditions" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/studies/conditions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_study_by_identifier(self, identifier_type, identifier, **kwargs):
        """
        Find study by DOI, PubMed ID, or slug.
        Returns a single study.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_study_by_identifier(identifier_type, identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier_type: Type of identifier to for the study to return. (required)
        :param str identifier: Identifier for the study to return. (required)
        :return: Study
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_study_by_identifier_with_http_info(identifier_type, identifier, **kwargs)
        else:
            (data) = self.get_study_by_identifier_with_http_info(identifier_type, identifier, **kwargs)
            return data

    def get_study_by_identifier_with_http_info(self, identifier_type, identifier, **kwargs):
        """
        Find study by DOI, PubMed ID, or slug.
        Returns a single study.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_study_by_identifier_with_http_info(identifier_type, identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier_type: Type of identifier to for the study to return. (required)
        :param str identifier: Identifier for the study to return. (required)
        :return: Study
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_type', 'identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_study_by_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_type' is set
        if ('identifier_type' not in params) or (params['identifier_type'] is None):
            raise ValueError("Missing the required parameter `identifier_type` when calling `get_study_by_identifier`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_study_by_identifier`")


        collection_formats = {}

        resource_path = '/studies/{identifierType}/{identifier}'.replace('{format}', 'json')
        path_params = {}
        if 'identifier_type' in params:
            path_params['identifierType'] = params['identifier_type']
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Study',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

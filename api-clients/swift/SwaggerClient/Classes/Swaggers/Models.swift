// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Brand]
            Decoders.addDecoder(clazz: [Brand].self) { (source: AnyObject) -> [Brand] in
                return Decoders.decode(clazz: [Brand].self, source: source)
            }
            // Decoder for Brand
            Decoders.addDecoder(clazz: Brand.self) { (source: AnyObject) -> Brand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Brand()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.link = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.flowers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["flowers"])
                instance.extracts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extracts"])
                instance.edibles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["edibles"])
                instance.products = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["products"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [Edible]
            Decoders.addDecoder(clazz: [Edible].self) { (source: AnyObject) -> [Edible] in
                return Decoders.decode(clazz: [Edible].self, source: source)
            }
            // Decoder for Edible
            Decoders.addDecoder(clazz: Edible.self) { (source: AnyObject) -> Edible in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Edible()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.brand = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["brand"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.strain = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["strain"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.labTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["labTest"])
                instance.thc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thc"])
                instance.cbd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cbd"])
                instance.cannabis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cannabis"])
                instance.hashOil = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hashOil"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [Extract]
            Decoders.addDecoder(clazz: [Extract].self) { (source: AnyObject) -> [Extract] in
                return Decoders.decode(clazz: [Extract].self, source: source)
            }
            // Decoder for Extract
            Decoders.addDecoder(clazz: Extract.self) { (source: AnyObject) -> Extract in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Extract()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.brand = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["brand"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.strain = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["strain"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.labTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["labTest"])
                instance.thc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thc"])
                instance.cbd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cbd"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [Flower]
            Decoders.addDecoder(clazz: [Flower].self) { (source: AnyObject) -> [Flower] in
                return Decoders.decode(clazz: [Flower].self, source: source)
            }
            // Decoder for Flower
            Decoders.addDecoder(clazz: Flower.self) { (source: AnyObject) -> Flower in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Flower()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.brand = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["brand"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.strain = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["strain"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.labTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["labTest"])
                instance.thc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thc"])
                instance.cbd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cbd"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse200Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse20010]
            Decoders.addDecoder(clazz: [InlineResponse20010].self) { (source: AnyObject) -> [InlineResponse20010] in
                return Decoders.decode(clazz: [InlineResponse20010].self, source: source)
            }
            // Decoder for InlineResponse20010
            Decoders.addDecoder(clazz: InlineResponse20010.self) { (source: AnyObject) -> InlineResponse20010 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse20010()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse20010Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse20010Meta]
            Decoders.addDecoder(clazz: [InlineResponse20010Meta].self) { (source: AnyObject) -> [InlineResponse20010Meta] in
                return Decoders.decode(clazz: [InlineResponse20010Meta].self, source: source)
            }
            // Decoder for InlineResponse20010Meta
            Decoders.addDecoder(clazz: InlineResponse20010Meta.self) { (source: AnyObject) -> InlineResponse20010Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse20010Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse20011]
            Decoders.addDecoder(clazz: [InlineResponse20011].self) { (source: AnyObject) -> [InlineResponse20011] in
                return Decoders.decode(clazz: [InlineResponse20011].self, source: source)
            }
            // Decoder for InlineResponse20011
            Decoders.addDecoder(clazz: InlineResponse20011.self) { (source: AnyObject) -> InlineResponse20011 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse20011()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse20011Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse20011Meta]
            Decoders.addDecoder(clazz: [InlineResponse20011Meta].self) { (source: AnyObject) -> [InlineResponse20011Meta] in
                return Decoders.decode(clazz: [InlineResponse20011Meta].self, source: source)
            }
            // Decoder for InlineResponse20011Meta
            Decoders.addDecoder(clazz: InlineResponse20011Meta.self) { (source: AnyObject) -> InlineResponse20011Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse20011Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2001Meta]
            Decoders.addDecoder(clazz: [InlineResponse2001Meta].self) { (source: AnyObject) -> [InlineResponse2001Meta] in
                return Decoders.decode(clazz: [InlineResponse2001Meta].self, source: source)
            }
            // Decoder for InlineResponse2001Meta
            Decoders.addDecoder(clazz: InlineResponse2001Meta.self) { (source: AnyObject) -> InlineResponse2001Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2002Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2002Meta]
            Decoders.addDecoder(clazz: [InlineResponse2002Meta].self) { (source: AnyObject) -> [InlineResponse2002Meta] in
                return Decoders.decode(clazz: [InlineResponse2002Meta].self, source: source)
            }
            // Decoder for InlineResponse2002Meta
            Decoders.addDecoder(clazz: InlineResponse2002Meta.self) { (source: AnyObject) -> InlineResponse2002Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2003Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2003Meta]
            Decoders.addDecoder(clazz: [InlineResponse2003Meta].self) { (source: AnyObject) -> [InlineResponse2003Meta] in
                return Decoders.decode(clazz: [InlineResponse2003Meta].self, source: source)
            }
            // Decoder for InlineResponse2003Meta
            Decoders.addDecoder(clazz: InlineResponse2003Meta.self) { (source: AnyObject) -> InlineResponse2003Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2004]
            Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
                return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
            }
            // Decoder for InlineResponse2004
            Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2004()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2004Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2004Meta]
            Decoders.addDecoder(clazz: [InlineResponse2004Meta].self) { (source: AnyObject) -> [InlineResponse2004Meta] in
                return Decoders.decode(clazz: [InlineResponse2004Meta].self, source: source)
            }
            // Decoder for InlineResponse2004Meta
            Decoders.addDecoder(clazz: InlineResponse2004Meta.self) { (source: AnyObject) -> InlineResponse2004Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2004Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2005]
            Decoders.addDecoder(clazz: [InlineResponse2005].self) { (source: AnyObject) -> [InlineResponse2005] in
                return Decoders.decode(clazz: [InlineResponse2005].self, source: source)
            }
            // Decoder for InlineResponse2005
            Decoders.addDecoder(clazz: InlineResponse2005.self) { (source: AnyObject) -> InlineResponse2005 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2005()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2005Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2005Meta]
            Decoders.addDecoder(clazz: [InlineResponse2005Meta].self) { (source: AnyObject) -> [InlineResponse2005Meta] in
                return Decoders.decode(clazz: [InlineResponse2005Meta].self, source: source)
            }
            // Decoder for InlineResponse2005Meta
            Decoders.addDecoder(clazz: InlineResponse2005Meta.self) { (source: AnyObject) -> InlineResponse2005Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2005Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2006]
            Decoders.addDecoder(clazz: [InlineResponse2006].self) { (source: AnyObject) -> [InlineResponse2006] in
                return Decoders.decode(clazz: [InlineResponse2006].self, source: source)
            }
            // Decoder for InlineResponse2006
            Decoders.addDecoder(clazz: InlineResponse2006.self) { (source: AnyObject) -> InlineResponse2006 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2006()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2006Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2006Meta]
            Decoders.addDecoder(clazz: [InlineResponse2006Meta].self) { (source: AnyObject) -> [InlineResponse2006Meta] in
                return Decoders.decode(clazz: [InlineResponse2006Meta].self, source: source)
            }
            // Decoder for InlineResponse2006Meta
            Decoders.addDecoder(clazz: InlineResponse2006Meta.self) { (source: AnyObject) -> InlineResponse2006Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2006Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2007]
            Decoders.addDecoder(clazz: [InlineResponse2007].self) { (source: AnyObject) -> [InlineResponse2007] in
                return Decoders.decode(clazz: [InlineResponse2007].self, source: source)
            }
            // Decoder for InlineResponse2007
            Decoders.addDecoder(clazz: InlineResponse2007.self) { (source: AnyObject) -> InlineResponse2007 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2007()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2007Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2007Meta]
            Decoders.addDecoder(clazz: [InlineResponse2007Meta].self) { (source: AnyObject) -> [InlineResponse2007Meta] in
                return Decoders.decode(clazz: [InlineResponse2007Meta].self, source: source)
            }
            // Decoder for InlineResponse2007Meta
            Decoders.addDecoder(clazz: InlineResponse2007Meta.self) { (source: AnyObject) -> InlineResponse2007Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2007Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2008]
            Decoders.addDecoder(clazz: [InlineResponse2008].self) { (source: AnyObject) -> [InlineResponse2008] in
                return Decoders.decode(clazz: [InlineResponse2008].self, source: source)
            }
            // Decoder for InlineResponse2008
            Decoders.addDecoder(clazz: InlineResponse2008.self) { (source: AnyObject) -> InlineResponse2008 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2008()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2008Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2008Meta]
            Decoders.addDecoder(clazz: [InlineResponse2008Meta].self) { (source: AnyObject) -> [InlineResponse2008Meta] in
                return Decoders.decode(clazz: [InlineResponse2008Meta].self, source: source)
            }
            // Decoder for InlineResponse2008Meta
            Decoders.addDecoder(clazz: InlineResponse2008Meta.self) { (source: AnyObject) -> InlineResponse2008Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2008Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse2009]
            Decoders.addDecoder(clazz: [InlineResponse2009].self) { (source: AnyObject) -> [InlineResponse2009] in
                return Decoders.decode(clazz: [InlineResponse2009].self, source: source)
            }
            // Decoder for InlineResponse2009
            Decoders.addDecoder(clazz: InlineResponse2009.self) { (source: AnyObject) -> InlineResponse2009 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2009()
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2009Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2009Meta]
            Decoders.addDecoder(clazz: [InlineResponse2009Meta].self) { (source: AnyObject) -> [InlineResponse2009Meta] in
                return Decoders.decode(clazz: [InlineResponse2009Meta].self, source: source)
            }
            // Decoder for InlineResponse2009Meta
            Decoders.addDecoder(clazz: InlineResponse2009Meta.self) { (source: AnyObject) -> InlineResponse2009Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2009Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [InlineResponse200Meta]
            Decoders.addDecoder(clazz: [InlineResponse200Meta].self) { (source: AnyObject) -> [InlineResponse200Meta] in
                return Decoders.decode(clazz: [InlineResponse200Meta].self, source: source)
            }
            // Decoder for InlineResponse200Meta
            Decoders.addDecoder(clazz: InlineResponse200Meta.self) { (source: AnyObject) -> InlineResponse200Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200Meta()
                instance.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"])
                return instance
            }


            // Decoder for [Pagination]
            Decoders.addDecoder(clazz: [Pagination].self) { (source: AnyObject) -> [Pagination] in
                return Decoders.decode(clazz: [Pagination].self, source: source)
            }
            // Decoder for Pagination
            Decoders.addDecoder(clazz: Pagination.self) { (source: AnyObject) -> Pagination in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pagination()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.perPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["per_page"])
                instance.currentPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["current_page"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"])
                instance.links = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["links"])
                return instance
            }


            // Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
            // Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.brand = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["brand"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.strain = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["strain"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.labTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["labTest"])
                instance.thc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thc"])
                instance.cbd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cbd"])
                instance.cannabis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cannabis"])
                instance.hashOil = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hashOil"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [SeedCompany]
            Decoders.addDecoder(clazz: [SeedCompany].self) { (source: AnyObject) -> [SeedCompany] in
                return Decoders.decode(clazz: [SeedCompany].self, source: source)
            }
            // Decoder for SeedCompany
            Decoders.addDecoder(clazz: SeedCompany.self) { (source: AnyObject) -> SeedCompany in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SeedCompany()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.lineage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["lineage"])
                instance.strains = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["strains"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }


            // Decoder for [Strain]
            Decoders.addDecoder(clazz: [Strain].self) { (source: AnyObject) -> [Strain] in
                return Decoders.decode(clazz: [Strain].self, source: source)
            }
            // Decoder for Strain
            Decoders.addDecoder(clazz: Strain.self) { (source: AnyObject) -> Strain in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Strain()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ocpc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ocpc"])
                instance.seedCompany = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["seedCompany"])
                instance.qr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qr"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.lineage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["lineage"])
                instance.genetics = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["genetics"])
                instance.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                return instance
            }
        }
    }
}
